2020-08-15 08:09:22,619 DEBUG [restartedMain] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, key_name, key_value, add_time, update_time, deleted from jindouyun_system WHERE ( deleted = ? ) 
2020-08-15 08:09:22,724 DEBUG [restartedMain] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 08:09:22,755 DEBUG [restartedMain] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 20
2020-08-15 08:09:25,083 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 08:09:25,103 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 08:09:25,108 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 08:09:25.0937674(Timestamp), false(Boolean)
2020-08-15 08:09:25,111 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 08:09:25,122 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 08:09:25,124 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 08:09:25.1186989(Timestamp), false(Boolean)
2020-08-15 08:09:25,126 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 15:45:52,996 ERROR [restartedMain] c.alibaba.druid.pool.DruidDataSource [DruidDataSource.java : 872] init datasource error, url: jdbc:mysql://localhost:3306/test_jindouyun?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true&verifyServerCertificate=false&useSSL=false
java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:835)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:455)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:199)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:156)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:218)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:150)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1560)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1623)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:861)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1903)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1846)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1774)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1500)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1395)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.autowireResource(CommonAnnotationBeanPostProcessor.java:520)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.getResource(CommonAnnotationBeanPostProcessor.java:496)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$ResourceElement.getResourceToInject(CommonAnnotationBeanPostProcessor.java:636)
	at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:180)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessProperties(CommonAnnotationBeanPostProcessor.java:321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:593)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:374)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.resolveBeanReference(ConfigurationClassEnhancer.java:394)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:366)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$44fd6353.realm(<generated>)
	at com.jindouyun.admin.config.ShiroConfig.defaultWebSecurityManager(ShiroConfig.java:58)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$44fd6353.CGLIB$defaultWebSecurityManager$4(<generated>)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$44fd6353$$FastClassBySpringCGLIB$$61028c88.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$44fd6353.defaultWebSecurityManager(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getSingletonFactoryBeanForTypeCheck(AbstractAutowireCapableBeanFactory.java:991)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:865)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:574)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:516)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:479)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:227)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1412)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1211)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.aop.framework.autoproxy.BeanFactoryAdvisorRetrievalHelper.findAdvisorBeans(BeanFactoryAdvisorRetrievalHelper.java:91)
	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findCandidateAdvisors(AbstractAdvisorAutoProxyCreator.java:109)
	at org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.findCandidateAdvisors(AnnotationAwareAspectJAutoProxyCreator.java:92)
	at org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.shouldSkip(AspectJAwareAdvisorAutoProxyCreator.java:101)
	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessBeforeInstantiation(AbstractAutoProxyCreator.java:251)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:1124)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:1097)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:504)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:240)
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:721)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:534)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.jindouyun.all.Application.main(Application.java:16)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-08-15 15:45:53,006 ERROR [restartedMain] c.alibaba.druid.pool.DruidDataSource [DruidDataSource.java : 905] {dataSource-1} init error
java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:835)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:455)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:199)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:156)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:218)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:150)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1560)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1623)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:861)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1903)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1846)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1774)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1500)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1395)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.autowireResource(CommonAnnotationBeanPostProcessor.java:520)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.getResource(CommonAnnotationBeanPostProcessor.java:496)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$ResourceElement.getResourceToInject(CommonAnnotationBeanPostProcessor.java:636)
	at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:180)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessProperties(CommonAnnotationBeanPostProcessor.java:321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:593)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:374)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.resolveBeanReference(ConfigurationClassEnhancer.java:394)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:366)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$44fd6353.realm(<generated>)
	at com.jindouyun.admin.config.ShiroConfig.defaultWebSecurityManager(ShiroConfig.java:58)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$44fd6353.CGLIB$defaultWebSecurityManager$4(<generated>)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$44fd6353$$FastClassBySpringCGLIB$$61028c88.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$44fd6353.defaultWebSecurityManager(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getSingletonFactoryBeanForTypeCheck(AbstractAutowireCapableBeanFactory.java:991)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:865)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:574)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:516)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:479)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:227)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1412)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1211)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.aop.framework.autoproxy.BeanFactoryAdvisorRetrievalHelper.findAdvisorBeans(BeanFactoryAdvisorRetrievalHelper.java:91)
	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findCandidateAdvisors(AbstractAdvisorAutoProxyCreator.java:109)
	at org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.findCandidateAdvisors(AnnotationAwareAspectJAutoProxyCreator.java:92)
	at org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.shouldSkip(AspectJAwareAdvisorAutoProxyCreator.java:101)
	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessBeforeInstantiation(AbstractAutoProxyCreator.java:251)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:1124)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:1097)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:504)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:240)
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:721)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:534)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.jindouyun.all.Application.main(Application.java:16)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-08-15 15:45:53,011 ERROR [Druid-ConnectionPool-Create-2033721708] c.alibaba.druid.pool.DruidDataSource [DruidDataSource.java : 2471] create connection SQLException, url: jdbc:mysql://localhost:3306/test_jindouyun?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true&verifyServerCertificate=false&useSSL=false, errorCode 1044, state 42000
java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:835)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:455)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:199)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:156)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:218)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:150)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1560)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1623)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2468)
2020-08-15 15:45:53,016 ERROR [Druid-ConnectionPool-Create-2033721708] c.alibaba.druid.pool.DruidDataSource [DruidDataSource.java : 2471] create connection SQLException, url: jdbc:mysql://localhost:3306/test_jindouyun?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true&verifyServerCertificate=false&useSSL=false, errorCode 1044, state 42000
java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:835)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:455)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:199)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:156)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:218)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:150)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1560)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1623)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2468)
2020-08-15 15:45:53,032 ERROR [restartedMain] o.s.boot.SpringApplication [SpringApplication.java : 858] Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'objectMapperConfigurer' defined in class path resource [springfox/documentation/spring/web/SpringfoxWebMvcConfiguration.class]: BeanPostProcessor before instantiation of bean failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'authorizationAttributeSourceAdvisor' defined in class path resource [com/jindouyun/admin/config/ShiroConfig.class]: Unsatisfied dependency expressed through method 'authorizationAttributeSourceAdvisor' parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'shiroFilterFactoryBean' defined in class path resource [com/jindouyun/admin/config/ShiroConfig.class]: Unsatisfied dependency expressed through method 'shiroFilterFactoryBean' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'defaultWebSecurityManager' defined in class path resource [com/jindouyun/admin/config/ShiroConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.shiro.web.mgt.DefaultWebSecurityManager]: Factory method 'defaultWebSecurityManager' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'realm': Unsatisfied dependency expressed through field 'adminService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jindouyunAdminService': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jindouyunAdminMapper' defined in file [Z:\JinDouYun\jindouyun-db\target\classes\com\jindouyun\db\dao\JindouyunAdminMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:240)
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:721)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:534)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.jindouyun.all.Application.main(Application.java:16)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'authorizationAttributeSourceAdvisor' defined in class path resource [com/jindouyun/admin/config/ShiroConfig.class]: Unsatisfied dependency expressed through method 'authorizationAttributeSourceAdvisor' parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'shiroFilterFactoryBean' defined in class path resource [com/jindouyun/admin/config/ShiroConfig.class]: Unsatisfied dependency expressed through method 'shiroFilterFactoryBean' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'defaultWebSecurityManager' defined in class path resource [com/jindouyun/admin/config/ShiroConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.shiro.web.mgt.DefaultWebSecurityManager]: Factory method 'defaultWebSecurityManager' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'realm': Unsatisfied dependency expressed through field 'adminService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jindouyunAdminService': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jindouyunAdminMapper' defined in file [Z:\JinDouYun\jindouyun-db\target\classes\com\jindouyun\db\dao\JindouyunAdminMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:769)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.aop.framework.autoproxy.BeanFactoryAdvisorRetrievalHelper.findAdvisorBeans(BeanFactoryAdvisorRetrievalHelper.java:91)
	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findCandidateAdvisors(AbstractAdvisorAutoProxyCreator.java:109)
	at org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.findCandidateAdvisors(AnnotationAwareAspectJAutoProxyCreator.java:92)
	at org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.shouldSkip(AspectJAwareAdvisorAutoProxyCreator.java:101)
	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessBeforeInstantiation(AbstractAutoProxyCreator.java:251)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:1124)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:1097)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:504)
	... 19 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'shiroFilterFactoryBean' defined in class path resource [com/jindouyun/admin/config/ShiroConfig.class]: Unsatisfied dependency expressed through method 'shiroFilterFactoryBean' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'defaultWebSecurityManager' defined in class path resource [com/jindouyun/admin/config/ShiroConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.shiro.web.mgt.DefaultWebSecurityManager]: Factory method 'defaultWebSecurityManager' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'realm': Unsatisfied dependency expressed through field 'adminService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jindouyunAdminService': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jindouyunAdminMapper' defined in file [Z:\JinDouYun\jindouyun-db\target\classes\com\jindouyun\db\dao\JindouyunAdminMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:769)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getSingletonFactoryBeanForTypeCheck(AbstractAutowireCapableBeanFactory.java:991)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:865)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:574)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:516)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:479)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:227)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1412)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1211)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	... 36 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'defaultWebSecurityManager' defined in class path resource [com/jindouyun/admin/config/ShiroConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.shiro.web.mgt.DefaultWebSecurityManager]: Factory method 'defaultWebSecurityManager' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'realm': Unsatisfied dependency expressed through field 'adminService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jindouyunAdminService': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jindouyunAdminMapper' defined in file [Z:\JinDouYun\jindouyun-db\target\classes\com\jindouyun\db\dao\JindouyunAdminMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:627)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	... 50 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.shiro.web.mgt.DefaultWebSecurityManager]: Factory method 'defaultWebSecurityManager' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'realm': Unsatisfied dependency expressed through field 'adminService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jindouyunAdminService': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jindouyunAdminMapper' defined in file [Z:\JinDouYun\jindouyun-db\target\classes\com\jindouyun\db\dao\JindouyunAdminMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	... 64 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'realm': Unsatisfied dependency expressed through field 'adminService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jindouyunAdminService': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jindouyunAdminMapper' defined in file [Z:\JinDouYun\jindouyun-db\target\classes\com\jindouyun\db\dao\JindouyunAdminMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:596)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:374)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.resolveBeanReference(ConfigurationClassEnhancer.java:394)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:366)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$44fd6353.realm(<generated>)
	at com.jindouyun.admin.config.ShiroConfig.defaultWebSecurityManager(ShiroConfig.java:58)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$44fd6353.CGLIB$defaultWebSecurityManager$4(<generated>)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$44fd6353$$FastClassBySpringCGLIB$$61028c88.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$44fd6353.defaultWebSecurityManager(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 65 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jindouyunAdminService': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jindouyunAdminMapper' defined in file [Z:\JinDouYun\jindouyun-db\target\classes\com\jindouyun\db\dao\JindouyunAdminMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessProperties(CommonAnnotationBeanPostProcessor.java:324)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:593)
	... 88 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jindouyunAdminMapper' defined in file [Z:\JinDouYun\jindouyun-db\target\classes\com\jindouyun\db\dao\JindouyunAdminMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1515)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1395)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.autowireResource(CommonAnnotationBeanPostProcessor.java:520)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.getResource(CommonAnnotationBeanPostProcessor.java:496)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$ResourceElement.getResourceToInject(CommonAnnotationBeanPostProcessor.java:636)
	at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:180)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessProperties(CommonAnnotationBeanPostProcessor.java:321)
	... 99 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:769)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1500)
	... 115 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1778)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	... 128 common frames omitted
Caused by: java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:835)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:455)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:199)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:156)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:218)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:150)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1560)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1623)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:861)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1903)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1846)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1774)
	... 139 common frames omitted
2020-08-15 15:48:53,076 DEBUG [restartedMain] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, key_name, key_value, add_time, update_time, deleted from jindouyun_system WHERE ( deleted = ? ) 
2020-08-15 15:48:53,098 DEBUG [restartedMain] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 15:48:53,131 DEBUG [restartedMain] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 20
2020-08-15 15:48:55,368 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 15:48:55,386 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 15:48:55,389 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 15:48:55.378044(Timestamp), false(Boolean)
2020-08-15 15:48:55,393 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 15:48:55,404 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 15:48:55,405 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 15:48:55.3989878(Timestamp), false(Boolean)
2020-08-15 15:48:55,407 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:34:24,261 ERROR [restartedMain] c.alibaba.druid.pool.DruidDataSource [DruidDataSource.java : 872] init datasource error, url: jdbc:mysql://localhost:3306/test_jindouyun?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true&verifyServerCertificate=false&useSSL=false
java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:835)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:455)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:199)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:156)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:218)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:150)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1560)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1623)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:861)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1903)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1846)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1774)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1500)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1395)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.autowireResource(CommonAnnotationBeanPostProcessor.java:520)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.getResource(CommonAnnotationBeanPostProcessor.java:496)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$ResourceElement.getResourceToInject(CommonAnnotationBeanPostProcessor.java:636)
	at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:180)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessProperties(CommonAnnotationBeanPostProcessor.java:321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:593)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:374)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.resolveBeanReference(ConfigurationClassEnhancer.java:394)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:366)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$243fda21.realm(<generated>)
	at com.jindouyun.admin.config.ShiroConfig.defaultWebSecurityManager(ShiroConfig.java:58)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$243fda21.CGLIB$defaultWebSecurityManager$1(<generated>)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$243fda21$$FastClassBySpringCGLIB$$3a6acf80.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$243fda21.defaultWebSecurityManager(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getSingletonFactoryBeanForTypeCheck(AbstractAutowireCapableBeanFactory.java:991)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:865)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:574)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:516)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:479)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:227)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1412)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1211)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.aop.framework.autoproxy.BeanFactoryAdvisorRetrievalHelper.findAdvisorBeans(BeanFactoryAdvisorRetrievalHelper.java:91)
	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findCandidateAdvisors(AbstractAdvisorAutoProxyCreator.java:109)
	at org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.findCandidateAdvisors(AnnotationAwareAspectJAutoProxyCreator.java:92)
	at org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.shouldSkip(AspectJAwareAdvisorAutoProxyCreator.java:101)
	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessBeforeInstantiation(AbstractAutoProxyCreator.java:251)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:1124)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:1097)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:504)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:240)
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:721)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:534)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.jindouyun.all.Application.main(Application.java:16)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-08-15 16:34:24,272 ERROR [restartedMain] c.alibaba.druid.pool.DruidDataSource [DruidDataSource.java : 905] {dataSource-1} init error
java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:835)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:455)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:199)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:156)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:218)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:150)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1560)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1623)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:861)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1903)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1846)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1774)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1500)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1395)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.autowireResource(CommonAnnotationBeanPostProcessor.java:520)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.getResource(CommonAnnotationBeanPostProcessor.java:496)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$ResourceElement.getResourceToInject(CommonAnnotationBeanPostProcessor.java:636)
	at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:180)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessProperties(CommonAnnotationBeanPostProcessor.java:321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:593)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:374)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.resolveBeanReference(ConfigurationClassEnhancer.java:394)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:366)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$243fda21.realm(<generated>)
	at com.jindouyun.admin.config.ShiroConfig.defaultWebSecurityManager(ShiroConfig.java:58)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$243fda21.CGLIB$defaultWebSecurityManager$1(<generated>)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$243fda21$$FastClassBySpringCGLIB$$3a6acf80.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$243fda21.defaultWebSecurityManager(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getSingletonFactoryBeanForTypeCheck(AbstractAutowireCapableBeanFactory.java:991)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:865)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:574)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:516)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:479)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:227)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1412)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1211)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.aop.framework.autoproxy.BeanFactoryAdvisorRetrievalHelper.findAdvisorBeans(BeanFactoryAdvisorRetrievalHelper.java:91)
	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findCandidateAdvisors(AbstractAdvisorAutoProxyCreator.java:109)
	at org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.findCandidateAdvisors(AnnotationAwareAspectJAutoProxyCreator.java:92)
	at org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.shouldSkip(AspectJAwareAdvisorAutoProxyCreator.java:101)
	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessBeforeInstantiation(AbstractAutoProxyCreator.java:251)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:1124)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:1097)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:504)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:240)
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:721)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:534)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.jindouyun.all.Application.main(Application.java:16)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-08-15 16:34:24,278 ERROR [Druid-ConnectionPool-Create-625559542] c.alibaba.druid.pool.DruidDataSource [DruidDataSource.java : 2471] create connection SQLException, url: jdbc:mysql://localhost:3306/test_jindouyun?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true&verifyServerCertificate=false&useSSL=false, errorCode 1044, state 42000
java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:835)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:455)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:199)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:156)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:218)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:150)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1560)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1623)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2468)
2020-08-15 16:34:24,284 ERROR [Druid-ConnectionPool-Create-625559542] c.alibaba.druid.pool.DruidDataSource [DruidDataSource.java : 2471] create connection SQLException, url: jdbc:mysql://localhost:3306/test_jindouyun?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true&verifyServerCertificate=false&useSSL=false, errorCode 1044, state 42000
java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:835)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:455)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:199)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:156)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:218)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:150)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1560)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1623)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2468)
2020-08-15 16:34:24,305 ERROR [restartedMain] o.s.boot.SpringApplication [SpringApplication.java : 858] Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'objectMapperConfigurer' defined in class path resource [springfox/documentation/spring/web/SpringfoxWebMvcConfiguration.class]: BeanPostProcessor before instantiation of bean failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'authorizationAttributeSourceAdvisor' defined in class path resource [com/jindouyun/admin/config/ShiroConfig.class]: Unsatisfied dependency expressed through method 'authorizationAttributeSourceAdvisor' parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'shiroFilterFactoryBean' defined in class path resource [com/jindouyun/admin/config/ShiroConfig.class]: Unsatisfied dependency expressed through method 'shiroFilterFactoryBean' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'defaultWebSecurityManager' defined in class path resource [com/jindouyun/admin/config/ShiroConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.shiro.web.mgt.DefaultWebSecurityManager]: Factory method 'defaultWebSecurityManager' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'realm': Unsatisfied dependency expressed through field 'adminService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jindouyunAdminService': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jindouyunAdminMapper' defined in file [Z:\JinDouYun\jindouyun-db\target\classes\com\jindouyun\db\dao\JindouyunAdminMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:240)
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:721)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:534)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.jindouyun.all.Application.main(Application.java:16)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'authorizationAttributeSourceAdvisor' defined in class path resource [com/jindouyun/admin/config/ShiroConfig.class]: Unsatisfied dependency expressed through method 'authorizationAttributeSourceAdvisor' parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'shiroFilterFactoryBean' defined in class path resource [com/jindouyun/admin/config/ShiroConfig.class]: Unsatisfied dependency expressed through method 'shiroFilterFactoryBean' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'defaultWebSecurityManager' defined in class path resource [com/jindouyun/admin/config/ShiroConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.shiro.web.mgt.DefaultWebSecurityManager]: Factory method 'defaultWebSecurityManager' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'realm': Unsatisfied dependency expressed through field 'adminService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jindouyunAdminService': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jindouyunAdminMapper' defined in file [Z:\JinDouYun\jindouyun-db\target\classes\com\jindouyun\db\dao\JindouyunAdminMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:769)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.aop.framework.autoproxy.BeanFactoryAdvisorRetrievalHelper.findAdvisorBeans(BeanFactoryAdvisorRetrievalHelper.java:91)
	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findCandidateAdvisors(AbstractAdvisorAutoProxyCreator.java:109)
	at org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.findCandidateAdvisors(AnnotationAwareAspectJAutoProxyCreator.java:92)
	at org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.shouldSkip(AspectJAwareAdvisorAutoProxyCreator.java:101)
	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessBeforeInstantiation(AbstractAutoProxyCreator.java:251)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:1124)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:1097)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:504)
	... 19 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'shiroFilterFactoryBean' defined in class path resource [com/jindouyun/admin/config/ShiroConfig.class]: Unsatisfied dependency expressed through method 'shiroFilterFactoryBean' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'defaultWebSecurityManager' defined in class path resource [com/jindouyun/admin/config/ShiroConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.shiro.web.mgt.DefaultWebSecurityManager]: Factory method 'defaultWebSecurityManager' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'realm': Unsatisfied dependency expressed through field 'adminService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jindouyunAdminService': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jindouyunAdminMapper' defined in file [Z:\JinDouYun\jindouyun-db\target\classes\com\jindouyun\db\dao\JindouyunAdminMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:769)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getSingletonFactoryBeanForTypeCheck(AbstractAutowireCapableBeanFactory.java:991)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:865)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:574)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:516)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:479)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:227)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1412)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1211)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	... 36 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'defaultWebSecurityManager' defined in class path resource [com/jindouyun/admin/config/ShiroConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.shiro.web.mgt.DefaultWebSecurityManager]: Factory method 'defaultWebSecurityManager' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'realm': Unsatisfied dependency expressed through field 'adminService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jindouyunAdminService': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jindouyunAdminMapper' defined in file [Z:\JinDouYun\jindouyun-db\target\classes\com\jindouyun\db\dao\JindouyunAdminMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:627)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	... 50 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.shiro.web.mgt.DefaultWebSecurityManager]: Factory method 'defaultWebSecurityManager' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'realm': Unsatisfied dependency expressed through field 'adminService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jindouyunAdminService': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jindouyunAdminMapper' defined in file [Z:\JinDouYun\jindouyun-db\target\classes\com\jindouyun\db\dao\JindouyunAdminMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	... 64 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'realm': Unsatisfied dependency expressed through field 'adminService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jindouyunAdminService': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jindouyunAdminMapper' defined in file [Z:\JinDouYun\jindouyun-db\target\classes\com\jindouyun\db\dao\JindouyunAdminMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:596)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:374)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.resolveBeanReference(ConfigurationClassEnhancer.java:394)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:366)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$243fda21.realm(<generated>)
	at com.jindouyun.admin.config.ShiroConfig.defaultWebSecurityManager(ShiroConfig.java:58)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$243fda21.CGLIB$defaultWebSecurityManager$1(<generated>)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$243fda21$$FastClassBySpringCGLIB$$3a6acf80.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$243fda21.defaultWebSecurityManager(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 65 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jindouyunAdminService': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jindouyunAdminMapper' defined in file [Z:\JinDouYun\jindouyun-db\target\classes\com\jindouyun\db\dao\JindouyunAdminMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessProperties(CommonAnnotationBeanPostProcessor.java:324)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:593)
	... 88 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jindouyunAdminMapper' defined in file [Z:\JinDouYun\jindouyun-db\target\classes\com\jindouyun\db\dao\JindouyunAdminMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1515)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1395)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.autowireResource(CommonAnnotationBeanPostProcessor.java:520)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.getResource(CommonAnnotationBeanPostProcessor.java:496)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$ResourceElement.getResourceToInject(CommonAnnotationBeanPostProcessor.java:636)
	at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:180)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessProperties(CommonAnnotationBeanPostProcessor.java:321)
	... 99 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:769)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1500)
	... 115 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1778)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	... 128 common frames omitted
Caused by: java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:835)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:455)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:199)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:156)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:218)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:150)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1560)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1623)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:861)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1903)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1846)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1774)
	... 139 common frames omitted
2020-08-15 16:36:06,572 DEBUG [restartedMain] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, key_name, key_value, add_time, update_time, deleted from jindouyun_system WHERE ( deleted = ? ) 
2020-08-15 16:36:06,595 DEBUG [restartedMain] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:36:06,622 DEBUG [restartedMain] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 20
2020-08-15 16:36:08,766 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 16:36:08,783 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:36:08,784 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 16:36:08.77303(Timestamp), false(Boolean)
2020-08-15 16:36:08,786 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:36:08,797 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:36:08,797 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 16:36:08.7939742(Timestamp), false(Boolean)
2020-08-15 16:36:08,799 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:36:17,451 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, username, `password`, last_login_ip, last_login_time, avatar, add_time, update_time, deleted, role_ids from jindouyun_admin WHERE ( username = ? and deleted = ? ) 
2020-08-15 16:36:17,452 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), false(Boolean)
2020-08-15 16:36:17,461 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:36:17,574 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==>  Preparing: update jindouyun_admin SET username = ?, `password` = ?, last_login_ip = ?, last_login_time = ?, avatar = ?, add_time = ?, update_time = ?, deleted = ?, role_ids = ? where id = ? 
2020-08-15 16:36:17,588 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), $2a$10$.rEfyBb/GURD9P2p0fRg/OAJGloGNDkJS4lY0cQHeqDgsbdTylBpu(String), 0:0:0:0:0:0:0:1(String), 2020-08-15 16:36:17.5717089(Timestamp), https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif(String), 2018-02-01 00:00:00.0(Timestamp), 2020-08-15 16:36:17.5717089(Timestamp), false(Boolean), [1](String), 1(Integer)
2020-08-15 16:36:17,596 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:36:17,599 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==>  Preparing: insert into jindouyun_log ( `admin`, ip, `type`, `action`, `status`, `result`, `comment`, add_time, update_time ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-08-15 16:36:17,600 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 登录(String), true(Boolean), (String), (String), 2020-08-15 16:36:17.5976394(Timestamp), 2020-08-15 16:36:17.5976394(Timestamp)
2020-08-15 16:36:17,605 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:36:17,606 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT LAST_INSERT_ID() 
2020-08-15 16:36:17,607 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 16:36:17,609 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:36:17,684 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:36:17,687 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:36:17,693 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:36:17,704 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:36:17,705 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:36:17,708 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:36:17,982 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_user WHERE ( deleted = ? ) 
2020-08-15 16:36:17,983 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:36:17,986 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:36:18,005 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods WHERE ( deleted = ? ) 
2020-08-15 16:36:18,006 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:36:18,016 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:36:18,029 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods_product WHERE ( deleted = ? ) 
2020-08-15 16:36:18,030 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:36:18,035 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:36:18,050 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_order WHERE ( deleted = ? ) 
2020-08-15 16:36:18,051 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:36:18,053 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:36:46,879 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, username, `password`, last_login_ip, last_login_time, avatar, add_time, update_time, deleted, role_ids from jindouyun_admin WHERE ( username = ? and deleted = ? ) 
2020-08-15 16:36:46,880 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), false(Boolean)
2020-08-15 16:36:46,881 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:36:46,975 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==>  Preparing: update jindouyun_admin SET username = ?, `password` = ?, last_login_ip = ?, last_login_time = ?, avatar = ?, add_time = ?, update_time = ?, deleted = ?, role_ids = ? where id = ? 
2020-08-15 16:36:46,977 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), $2a$10$.rEfyBb/GURD9P2p0fRg/OAJGloGNDkJS4lY0cQHeqDgsbdTylBpu(String), 0:0:0:0:0:0:0:1(String), 2020-08-15 16:36:46.9758142(Timestamp), https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif(String), 2018-02-01 00:00:00.0(Timestamp), 2020-08-15 16:36:46.9758142(Timestamp), false(Boolean), [1](String), 1(Integer)
2020-08-15 16:36:46,985 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:36:46,987 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==>  Preparing: insert into jindouyun_log ( `admin`, ip, `type`, `action`, `status`, `result`, `comment`, add_time, update_time ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-08-15 16:36:46,989 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 登录(String), true(Boolean), (String), (String), 2020-08-15 16:36:46.9867857(Timestamp), 2020-08-15 16:36:46.9867857(Timestamp)
2020-08-15 16:36:46,995 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:36:46,996 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT LAST_INSERT_ID() 
2020-08-15 16:36:46,997 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 16:36:46,999 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:36:47,043 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:36:47,044 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:36:47,046 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:36:47,049 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:36:47,050 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:36:47,052 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:36:47,269 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_user WHERE ( deleted = ? ) 
2020-08-15 16:36:47,270 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:36:47,273 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:36:47,275 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods WHERE ( deleted = ? ) 
2020-08-15 16:36:47,276 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:36:47,278 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:36:47,281 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods_product WHERE ( deleted = ? ) 
2020-08-15 16:36:47,281 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:36:47,282 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:36:47,284 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_order WHERE ( deleted = ? ) 
2020-08-15 16:36:47,285 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:36:47,287 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:08,801 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 16:37:08,802 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:37:08,803 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 16:37:08.8013863(Timestamp), false(Boolean)
2020-08-15 16:37:08,804 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:37:08,806 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:37:08,806 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 16:37:08.8054037(Timestamp), false(Boolean)
2020-08-15 16:37:08,807 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:37:10,944 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:37:10,945 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:37:10,947 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:10,950 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:37:10,951 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:37:10,952 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:11,003 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:37:11,003 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:37:11,005 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:11,006 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:37:11,007 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:37:11,008 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:11,038 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample_COUNT [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT count(0) FROM jindouyun_user WHERE (deleted = ?) 
2020-08-15 16:37:11,039 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample_COUNT [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:37:11,042 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample_COUNT [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:11,044 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, username, `password`, gender, birthday, last_login_time, last_login_ip, nickname, mobile, avatar, weixin_openid, session_key, `status`, add_time, update_time, deleted from jindouyun_user WHERE ( deleted = ? ) order by add_time desc LIMIT ? 
2020-08-15 16:37:11,044 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean), 20(Integer)
2020-08-15 16:37:11,048 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 9
2020-08-15 16:37:12,482 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:37:12,484 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:37:12,486 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:12,488 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:37:12,489 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:37:12,490 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:12,502 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:37:12,503 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:37:12,504 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:12,506 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:37:12,507 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:37:12,508 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:12,521 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample_COUNT [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT count(0) FROM jindouyun_address WHERE (deleted = ?) 
2020-08-15 16:37:12,522 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample_COUNT [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:37:12,527 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample_COUNT [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:12,528 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, user_id, province, city, county, building, address_detail, area_code, postal_code, tel, is_default, add_time, update_time, deleted from jindouyun_address WHERE ( deleted = ? ) order by add_time desc LIMIT ? 
2020-08-15 16:37:12,529 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean), 20(Integer)
2020-08-15 16:37:12,532 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 14
2020-08-15 16:37:13,953 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:37:13,953 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:37:13,955 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:13,956 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:37:13,956 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:37:13,957 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:13,968 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:37:13,969 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:37:13,970 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:13,972 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:37:13,973 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:37:13,974 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:13,990 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample_COUNT [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT count(0) FROM jindouyun_feedback WHERE (deleted = ?) 
2020-08-15 16:37:13,990 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample_COUNT [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:37:13,995 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample_COUNT [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:13,996 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, username, mobile, feed_type, content, `status`, has_picture, pic_urls, add_time, update_time, deleted from jindouyun_feedback WHERE ( deleted = ? ) order by add_time desc LIMIT ? 
2020-08-15 16:37:13,996 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean), 20(Integer)
2020-08-15 16:37:14,002 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 8
2020-08-15 16:37:16,960 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:37:16,961 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:37:16,962 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:16,964 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:37:16,964 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:37:16,966 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:16,978 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:37:16,979 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:37:16,980 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:16,981 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:37:16,983 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:37:16,985 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:17,004 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExampleSelective_COUNT [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT count(0) FROM jindouyun_brand WHERE (deleted = ?) 
2020-08-15 16:37:17,005 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExampleSelective_COUNT [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:37:17,009 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExampleSelective_COUNT [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:17,010 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExampleSelective [BaseJdbcLogger.java : 159] ==>  Preparing: select id , user_id , adderss_id , `name` , `desc` , notice , pic_url , start_time , end_time , delivery_price , total_turnover , total_order , floor_price , `status` from jindouyun_brand WHERE ( deleted = ? ) order by add_time desc LIMIT ? 
2020-08-15 16:37:17,011 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExampleSelective [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean), 20(Integer)
2020-08-15 16:37:17,019 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExampleSelective [BaseJdbcLogger.java : 159] <==      Total: 20
2020-08-15 16:37:18,568 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:37:18,570 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:37:18,571 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:18,573 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:37:18,573 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:37:18,574 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:37:18,574 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:37:18,575 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:18,575 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:18,576 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:37:18,577 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:37:18,579 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:18,586 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:37:18,587 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:37:18,589 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:18,589 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:37:18,590 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:37:18,590 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:37:18,591 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:37:18,591 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:18,592 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:18,592 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:37:18,592 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:37:18,593 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:18,605 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 16:37:18,606 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( `level` = ? and deleted = ? ) 
2020-08-15 16:37:18,606 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Integer), false(Boolean)
2020-08-15 16:37:18,606 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: L1(String), false(Boolean)
2020-08-15 16:37:18,612 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 9
2020-08-15 16:37:18,616 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 16:37:18,617 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1005000(Integer), false(Boolean)
2020-08-15 16:37:18,618 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 9
2020-08-15 16:37:18,620 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 10
2020-08-15 16:37:18,621 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 16:37:18,622 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1005001(Integer), false(Boolean)
2020-08-15 16:37:18,625 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 9
2020-08-15 16:37:18,626 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 16:37:18,626 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1005002(Integer), false(Boolean)
2020-08-15 16:37:18,629 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 10
2020-08-15 16:37:18,630 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 16:37:18,632 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1008000(Integer), false(Boolean)
2020-08-15 16:37:18,635 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 9
2020-08-15 16:37:18,637 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 16:37:18,638 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1010000(Integer), false(Boolean)
2020-08-15 16:37:18,641 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 11
2020-08-15 16:37:18,643 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 16:37:18,644 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1011000(Integer), false(Boolean)
2020-08-15 16:37:18,645 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 7
2020-08-15 16:37:18,646 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 16:37:18,647 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1012000(Integer), false(Boolean)
2020-08-15 16:37:18,652 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 10
2020-08-15 16:37:18,653 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 16:37:18,654 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1013001(Integer), false(Boolean)
2020-08-15 16:37:18,655 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 7
2020-08-15 16:37:18,656 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 16:37:18,657 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1019000(Integer), false(Boolean)
2020-08-15 16:37:18,659 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 11
2020-08-15 16:37:25,870 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:37:25,871 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:37:25,872 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:25,873 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:37:25,874 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:37:25,875 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:25,889 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:37:25,890 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:37:25,892 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:25,894 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:37:25,895 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:37:25,896 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:25,907 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExampleSelective [BaseJdbcLogger.java : 159] ==>  Preparing: select id from jindouyun_order WHERE ( deleted = ? ) 
2020-08-15 16:37:25,908 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExampleSelective [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:37:25,909 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExampleSelective [BaseJdbcLogger.java : 159] <==      Total: 7
2020-08-15 16:37:25,922 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample_COUNT [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT count(0) FROM jindouyun_order_split WHERE (brand_id = ? AND order_id IN (?, ?, ?, ?, ?, ?, ?) AND deleted = ?) 
2020-08-15 16:37:25,923 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample_COUNT [BaseJdbcLogger.java : 159] ==> Parameters: 0(Integer), 1(Integer), 5(Integer), 6(Integer), 7(Integer), 8(Integer), 9(Integer), 11(Integer), false(Boolean)
2020-08-15 16:37:25,929 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample_COUNT [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:37:25,930 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, brand_id, order_id, merge_id, order_sn, order_status, consignee, mobile, building, address, message, goods_price, receive_time, pickup_time, arrive_time, add_time, update_time, deleted from jindouyun_order_split WHERE ( brand_id = ? and order_id in ( ? , ? , ? , ? , ? , ? , ? ) and deleted = ? ) order by add_time desc LIMIT ? 
2020-08-15 16:37:25,931 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Integer), 1(Integer), 5(Integer), 6(Integer), 7(Integer), 8(Integer), 9(Integer), 11(Integer), false(Boolean), 20(Integer)
2020-08-15 16:37:25,934 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:38:08,809 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 16:38:08,810 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:38:08,811 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 16:38:08.8090188(Timestamp), false(Boolean)
2020-08-15 16:38:08,812 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:38:08,813 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:38:08,814 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 16:38:08.8127815(Timestamp), false(Boolean)
2020-08-15 16:38:08,814 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:38:37,419 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:38:37,420 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:38:37,421 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:38:37,422 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:38:37,423 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:38:37,425 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:38:37,431 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:38:37,432 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:38:37,434 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:38:37,436 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:38:37,437 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:38:37,439 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:38:37,442 DEBUG [http-nio-8080-exec-10] c.j.db.dao.StatMapper.statUser [BaseJdbcLogger.java : 159] ==>  Preparing: select substr(add_time,1,10) as day, count(distinct id) as users from jindouyun_user group by substr(add_time,1,10) 
2020-08-15 16:38:37,443 DEBUG [http-nio-8080-exec-10] c.j.db.dao.StatMapper.statUser [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 16:38:37,449 DEBUG [http-nio-8080-exec-10] c.j.db.dao.StatMapper.statUser [BaseJdbcLogger.java : 159] <==      Total: 3
2020-08-15 16:38:45,302 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_user WHERE ( deleted = ? ) 
2020-08-15 16:38:45,303 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:38:45,304 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:38:45,306 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods WHERE ( deleted = ? ) 
2020-08-15 16:38:45,307 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:38:45,309 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:38:45,311 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods_product WHERE ( deleted = ? ) 
2020-08-15 16:38:45,312 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:38:45,313 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:38:45,314 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_order WHERE ( deleted = ? ) 
2020-08-15 16:38:45,314 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:38:45,315 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:38:51,848 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:38:51,850 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:38:51,852 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:38:51,855 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:38:51,856 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:38:51,858 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:38:51,991 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_user WHERE ( deleted = ? ) 
2020-08-15 16:38:51,992 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:38:51,993 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:38:51,995 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods WHERE ( deleted = ? ) 
2020-08-15 16:38:51,996 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:38:51,998 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:38:51,999 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods_product WHERE ( deleted = ? ) 
2020-08-15 16:38:52,000 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:38:52,001 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:38:52,003 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_order WHERE ( deleted = ? ) 
2020-08-15 16:38:52,004 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:38:52,006 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:39:08,816 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 16:39:08,817 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:39:08,818 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 16:39:08.8165173(Timestamp), false(Boolean)
2020-08-15 16:39:08,819 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:39:08,820 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:39:08,820 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 16:39:08.8193739(Timestamp), false(Boolean)
2020-08-15 16:39:08,821 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:40:08,823 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 16:40:08,825 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:40:08,826 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 16:40:08.8237428(Timestamp), false(Boolean)
2020-08-15 16:40:08,827 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:40:08,828 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:40:08,829 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 16:40:08.8287205(Timestamp), false(Boolean)
2020-08-15 16:40:08,830 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:41:08,831 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 16:41:08,833 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:41:08,834 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 16:41:08.8319408(Timestamp), false(Boolean)
2020-08-15 16:41:08,835 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:41:08,837 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:41:08,838 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 16:41:08.8367073(Timestamp), false(Boolean)
2020-08-15 16:41:08,838 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:42:08,840 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 16:42:08,842 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:42:08,843 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 16:42:08.8408257(Timestamp), false(Boolean)
2020-08-15 16:42:08,843 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:42:08,844 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:42:08,845 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 16:42:08.844806(Timestamp), false(Boolean)
2020-08-15 16:42:08,846 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:42:56,295 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==>  Preparing: insert into jindouyun_log ( `admin`, ip, `type`, `action`, `status`, `result`, `comment`, add_time, update_time ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-08-15 16:42:56,296 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 退出(String), true(Boolean), (String), (String), 2020-08-15 16:42:56.2953488(Timestamp), 2020-08-15 16:42:56.2953488(Timestamp)
2020-08-15 16:42:56,304 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:42:56,304 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT LAST_INSERT_ID() 
2020-08-15 16:42:56,305 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 16:42:56,306 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:43:08,847 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 16:43:08,847 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:43:08,848 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 16:43:08.8479061(Timestamp), false(Boolean)
2020-08-15 16:43:08,852 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:43:08,853 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:43:08,853 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 16:43:08.8528915(Timestamp), false(Boolean)
2020-08-15 16:43:08,855 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:43:23,366 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, username, `password`, last_login_ip, last_login_time, avatar, add_time, update_time, deleted, role_ids from jindouyun_admin WHERE ( username = ? and deleted = ? ) 
2020-08-15 16:43:23,367 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), false(Boolean)
2020-08-15 16:43:23,371 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:43:23,461 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==>  Preparing: update jindouyun_admin SET username = ?, `password` = ?, last_login_ip = ?, last_login_time = ?, avatar = ?, add_time = ?, update_time = ?, deleted = ?, role_ids = ? where id = ? 
2020-08-15 16:43:23,462 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), $2a$10$aCtsc4rG6KmxQ59.IkYse.oRyKuwQoU2CPCmxSdB.d5nXq6aw/z4O(String), 0:0:0:0:0:0:0:1(String), 2020-08-15 16:43:23.4614778(Timestamp), //r7zed289l71ksxoknq6p.png(String), 2019-01-07 15:17:25.0(Timestamp), 2020-08-15 16:43:23.4614778(Timestamp), false(Boolean), [2](String), 5(Integer)
2020-08-15 16:43:23,469 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:43:23,470 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==>  Preparing: insert into jindouyun_log ( `admin`, ip, `type`, `action`, `status`, `result`, `comment`, add_time, update_time ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-08-15 16:43:23,471 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 登录(String), true(Boolean), (String), (String), 2020-08-15 16:43:23.4704548(Timestamp), 2020-08-15 16:43:23.4704548(Timestamp)
2020-08-15 16:43:23,477 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:43:23,477 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT LAST_INSERT_ID() 
2020-08-15 16:43:23,478 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 16:43:23,479 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:43:23,502 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:43:23,503 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 2(Integer), true(Boolean), false(Boolean)
2020-08-15 16:43:23,506 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:43:23,507 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:43:23,508 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 2(Integer), false(Boolean)
2020-08-15 16:43:23,510 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:43:27,727 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, username, `password`, last_login_ip, last_login_time, avatar, add_time, update_time, deleted, role_ids from jindouyun_admin WHERE ( username = ? and deleted = ? ) 
2020-08-15 16:43:27,728 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), false(Boolean)
2020-08-15 16:43:27,729 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:43:27,817 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==>  Preparing: update jindouyun_admin SET username = ?, `password` = ?, last_login_ip = ?, last_login_time = ?, avatar = ?, add_time = ?, update_time = ?, deleted = ?, role_ids = ? where id = ? 
2020-08-15 16:43:27,819 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), $2a$10$aCtsc4rG6KmxQ59.IkYse.oRyKuwQoU2CPCmxSdB.d5nXq6aw/z4O(String), 0:0:0:0:0:0:0:1(String), 2020-08-15 16:43:27.8170644(Timestamp), //r7zed289l71ksxoknq6p.png(String), 2019-01-07 15:17:25.0(Timestamp), 2020-08-15 16:43:27.8170644(Timestamp), false(Boolean), [2](String), 5(Integer)
2020-08-15 16:43:27,825 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:43:27,826 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==>  Preparing: insert into jindouyun_log ( `admin`, ip, `type`, `action`, `status`, `result`, `comment`, add_time, update_time ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-08-15 16:43:27,827 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 登录(String), true(Boolean), (String), (String), 2020-08-15 16:43:27.8260033(Timestamp), 2020-08-15 16:43:27.8260033(Timestamp)
2020-08-15 16:43:27,830 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:43:27,831 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT LAST_INSERT_ID() 
2020-08-15 16:43:27,831 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 16:43:27,832 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:43:27,851 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:43:27,852 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 2(Integer), true(Boolean), false(Boolean)
2020-08-15 16:43:27,853 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:43:27,854 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:43:27,855 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 2(Integer), false(Boolean)
2020-08-15 16:43:27,856 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:44:08,858 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 16:44:08,859 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:44:08,859 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 16:44:08.8580161(Timestamp), false(Boolean)
2020-08-15 16:44:08,860 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:44:08,861 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:44:08,862 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 16:44:08.8610086(Timestamp), false(Boolean)
2020-08-15 16:44:08,862 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:44:15,244 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, username, `password`, last_login_ip, last_login_time, avatar, add_time, update_time, deleted, role_ids from jindouyun_admin WHERE ( username = ? and deleted = ? ) 
2020-08-15 16:44:15,244 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), false(Boolean)
2020-08-15 16:44:15,246 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:44:15,339 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==>  Preparing: update jindouyun_admin SET username = ?, `password` = ?, last_login_ip = ?, last_login_time = ?, avatar = ?, add_time = ?, update_time = ?, deleted = ?, role_ids = ? where id = ? 
2020-08-15 16:44:15,339 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), $2a$10$aCtsc4rG6KmxQ59.IkYse.oRyKuwQoU2CPCmxSdB.d5nXq6aw/z4O(String), 0:0:0:0:0:0:0:1(String), 2020-08-15 16:44:15.3384414(Timestamp), //r7zed289l71ksxoknq6p.png(String), 2019-01-07 15:17:25.0(Timestamp), 2020-08-15 16:44:15.3384414(Timestamp), false(Boolean), [2](String), 5(Integer)
2020-08-15 16:44:15,347 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:44:15,348 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==>  Preparing: insert into jindouyun_log ( `admin`, ip, `type`, `action`, `status`, `result`, `comment`, add_time, update_time ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-08-15 16:44:15,350 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 登录(String), true(Boolean), (String), (String), 2020-08-15 16:44:15.3474161(Timestamp), 2020-08-15 16:44:15.3474161(Timestamp)
2020-08-15 16:44:15,355 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:44:15,356 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT LAST_INSERT_ID() 
2020-08-15 16:44:15,356 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 16:44:15,357 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:44:15,377 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:44:15,378 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 2(Integer), true(Boolean), false(Boolean)
2020-08-15 16:44:15,379 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:44:15,380 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:44:15,381 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 2(Integer), false(Boolean)
2020-08-15 16:44:15,382 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:44:29,796 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, username, `password`, last_login_ip, last_login_time, avatar, add_time, update_time, deleted, role_ids from jindouyun_admin WHERE ( username = ? and deleted = ? ) 
2020-08-15 16:44:29,797 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), false(Boolean)
2020-08-15 16:44:29,798 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:44:29,887 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==>  Preparing: update jindouyun_admin SET username = ?, `password` = ?, last_login_ip = ?, last_login_time = ?, avatar = ?, add_time = ?, update_time = ?, deleted = ?, role_ids = ? where id = ? 
2020-08-15 16:44:29,887 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), $2a$10$.rEfyBb/GURD9P2p0fRg/OAJGloGNDkJS4lY0cQHeqDgsbdTylBpu(String), 0:0:0:0:0:0:0:1(String), 2020-08-15 16:44:29.8867306(Timestamp), https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif(String), 2018-02-01 00:00:00.0(Timestamp), 2020-08-15 16:44:29.8867306(Timestamp), false(Boolean), [1](String), 1(Integer)
2020-08-15 16:44:29,896 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:44:29,897 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==>  Preparing: insert into jindouyun_log ( `admin`, ip, `type`, `action`, `status`, `result`, `comment`, add_time, update_time ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-08-15 16:44:29,897 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 登录(String), true(Boolean), (String), (String), 2020-08-15 16:44:29.8977013(Timestamp), 2020-08-15 16:44:29.8977013(Timestamp)
2020-08-15 16:44:29,903 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:44:29,904 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT LAST_INSERT_ID() 
2020-08-15 16:44:29,904 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 16:44:29,906 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:44:29,923 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:44:29,924 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:44:29,925 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:44:29,925 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:44:29,926 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:44:29,928 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:44:30,023 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_user WHERE ( deleted = ? ) 
2020-08-15 16:44:30,025 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:44:30,029 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:44:30,030 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods WHERE ( deleted = ? ) 
2020-08-15 16:44:30,031 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:44:30,034 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:44:30,035 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods_product WHERE ( deleted = ? ) 
2020-08-15 16:44:30,036 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:44:30,040 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:44:30,042 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_order WHERE ( deleted = ? ) 
2020-08-15 16:44:30,042 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:44:30,045 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:44:34,982 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:44:34,983 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:44:34,984 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:44:34,985 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:44:34,986 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:44:34,987 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:44:34,993 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( deleted = ? ) 
2020-08-15 16:44:34,994 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:44:34,996 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:44:34,997 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:44:34,998 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:44:34,999 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:44:35,000 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:44:35,001 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:44:35,002 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:44:35,006 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExampleSelective_COUNT [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT count(0) FROM jindouyun_admin WHERE (deleted = ?) 
2020-08-15 16:44:35,006 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExampleSelective_COUNT [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:44:35,008 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExampleSelective_COUNT [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:44:35,009 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExampleSelective [BaseJdbcLogger.java : 159] ==>  Preparing: select id , username , avatar , role_ids from jindouyun_admin WHERE ( deleted = ? ) order by add_time desc LIMIT ? 
2020-08-15 16:44:35,009 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExampleSelective [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean), 20(Integer)
2020-08-15 16:44:35,011 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExampleSelective [BaseJdbcLogger.java : 159] <==      Total: 3
2020-08-15 16:44:48,768 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:44:48,769 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:44:48,770 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:44:48,771 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:44:48,771 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:44:48,772 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:44:48,774 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:44:48,775 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:44:48,776 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:44:48,778 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:44:48,779 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:44:48,780 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:44:48,784 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==>  Preparing: update jindouyun_admin SET username = ?, avatar = ?, update_time = ?, role_ids = ? where id = ? 
2020-08-15 16:44:48,785 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), //r7zed289l71ksxoknq6p.png(String), 2020-08-15 16:44:48.7834158(Timestamp), [2](String), 5(Integer)
2020-08-15 16:44:48,791 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:44:48,793 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==>  Preparing: insert into jindouyun_log ( `admin`, ip, `type`, `action`, `status`, `result`, `comment`, add_time, update_time ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-08-15 16:44:48,794 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 编辑管理员(String), true(Boolean), mall123(String), (String), 2020-08-15 16:44:48.7923924(Timestamp), 2020-08-15 16:44:48.7923924(Timestamp)
2020-08-15 16:44:48,798 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:44:48,799 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT LAST_INSERT_ID() 
2020-08-15 16:44:48,799 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 16:44:48,800 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:44:53,588 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, username, `password`, last_login_ip, last_login_time, avatar, add_time, update_time, deleted, role_ids from jindouyun_admin WHERE ( username = ? and deleted = ? ) 
2020-08-15 16:44:53,589 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), false(Boolean)
2020-08-15 16:44:53,590 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:44:53,678 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==>  Preparing: update jindouyun_admin SET username = ?, `password` = ?, last_login_ip = ?, last_login_time = ?, avatar = ?, add_time = ?, update_time = ?, deleted = ?, role_ids = ? where id = ? 
2020-08-15 16:44:53,679 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), $2a$10$aCtsc4rG6KmxQ59.IkYse.oRyKuwQoU2CPCmxSdB.d5nXq6aw/z4O(String), 0:0:0:0:0:0:0:1(String), 2020-08-15 16:44:53.6785614(Timestamp), //r7zed289l71ksxoknq6p.png(String), 2019-01-07 15:17:25.0(Timestamp), 2020-08-15 16:44:53.6785614(Timestamp), false(Boolean), [2](String), 5(Integer)
2020-08-15 16:44:53,686 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:44:53,687 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==>  Preparing: insert into jindouyun_log ( `admin`, ip, `type`, `action`, `status`, `result`, `comment`, add_time, update_time ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-08-15 16:44:53,689 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 登录(String), true(Boolean), (String), (String), 2020-08-15 16:44:53.6875063(Timestamp), 2020-08-15 16:44:53.6875063(Timestamp)
2020-08-15 16:44:53,693 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:44:53,694 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT LAST_INSERT_ID() 
2020-08-15 16:44:53,694 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 16:44:53,695 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:44:53,716 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:44:53,717 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 2(Integer), true(Boolean), false(Boolean)
2020-08-15 16:44:53,718 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:44:53,719 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:44:53,719 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 2(Integer), false(Boolean)
2020-08-15 16:44:53,720 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:44:57,653 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, username, `password`, last_login_ip, last_login_time, avatar, add_time, update_time, deleted, role_ids from jindouyun_admin WHERE ( username = ? and deleted = ? ) 
2020-08-15 16:44:57,654 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), false(Boolean)
2020-08-15 16:44:57,655 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:44:57,749 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==>  Preparing: update jindouyun_admin SET username = ?, `password` = ?, last_login_ip = ?, last_login_time = ?, avatar = ?, add_time = ?, update_time = ?, deleted = ?, role_ids = ? where id = ? 
2020-08-15 16:44:57,749 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), $2a$10$aCtsc4rG6KmxQ59.IkYse.oRyKuwQoU2CPCmxSdB.d5nXq6aw/z4O(String), 0:0:0:0:0:0:0:1(String), 2020-08-15 16:44:57.7490075(Timestamp), //r7zed289l71ksxoknq6p.png(String), 2019-01-07 15:17:25.0(Timestamp), 2020-08-15 16:44:57.7490075(Timestamp), false(Boolean), [2](String), 5(Integer)
2020-08-15 16:44:57,756 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:44:57,757 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==>  Preparing: insert into jindouyun_log ( `admin`, ip, `type`, `action`, `status`, `result`, `comment`, add_time, update_time ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-08-15 16:44:57,758 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 登录(String), true(Boolean), (String), (String), 2020-08-15 16:44:57.7579541(Timestamp), 2020-08-15 16:44:57.7579541(Timestamp)
2020-08-15 16:44:57,763 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:44:57,764 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT LAST_INSERT_ID() 
2020-08-15 16:44:57,765 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 16:44:57,766 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:44:57,798 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:44:57,799 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 2(Integer), true(Boolean), false(Boolean)
2020-08-15 16:44:57,800 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:44:57,801 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:44:57,802 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 2(Integer), false(Boolean)
2020-08-15 16:44:57,803 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:45:08,864 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 16:45:08,864 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:45:08,865 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 16:45:08.8640123(Timestamp), false(Boolean)
2020-08-15 16:45:08,866 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:45:08,866 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:45:08,867 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 16:45:08.866007(Timestamp), false(Boolean)
2020-08-15 16:45:08,867 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:46:08,869 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 16:46:08,871 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:46:08,871 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 16:46:08.8699202(Timestamp), false(Boolean)
2020-08-15 16:46:08,872 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:46:08,873 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:46:08,873 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 16:46:08.8729125(Timestamp), false(Boolean)
2020-08-15 16:46:08,874 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:47:08,876 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 16:47:08,878 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:47:08,879 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 16:47:08.876089(Timestamp), false(Boolean)
2020-08-15 16:47:08,879 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:47:08,880 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:47:08,880 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 16:47:08.8800682(Timestamp), false(Boolean)
2020-08-15 16:47:08,881 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:47:39,305 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:47:39,307 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:47:39,309 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:47:39,311 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:47:39,312 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:47:39,314 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:47:39,570 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_user WHERE ( deleted = ? ) 
2020-08-15 16:47:39,572 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:47:39,574 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:47:39,576 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods WHERE ( deleted = ? ) 
2020-08-15 16:47:39,578 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:47:39,580 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:47:39,582 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods_product WHERE ( deleted = ? ) 
2020-08-15 16:47:39,583 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:47:39,587 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:47:39,588 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_order WHERE ( deleted = ? ) 
2020-08-15 16:47:39,590 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:47:39,591 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:47:42,750 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==>  Preparing: insert into jindouyun_log ( `admin`, ip, `type`, `action`, `status`, `result`, `comment`, add_time, update_time ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-08-15 16:47:42,751 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 退出(String), true(Boolean), (String), (String), 2020-08-15 16:47:42.74989(Timestamp), 2020-08-15 16:47:42.74989(Timestamp)
2020-08-15 16:47:42,758 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:47:42,759 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT LAST_INSERT_ID() 
2020-08-15 16:47:42,760 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 16:47:42,760 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:47:53,520 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, username, `password`, last_login_ip, last_login_time, avatar, add_time, update_time, deleted, role_ids from jindouyun_admin WHERE ( username = ? and deleted = ? ) 
2020-08-15 16:47:53,521 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), false(Boolean)
2020-08-15 16:47:53,522 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:47:53,611 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==>  Preparing: update jindouyun_admin SET username = ?, `password` = ?, last_login_ip = ?, last_login_time = ?, avatar = ?, add_time = ?, update_time = ?, deleted = ?, role_ids = ? where id = ? 
2020-08-15 16:47:53,611 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), $2a$10$aCtsc4rG6KmxQ59.IkYse.oRyKuwQoU2CPCmxSdB.d5nXq6aw/z4O(String), 0:0:0:0:0:0:0:1(String), 2020-08-15 16:47:53.6107176(Timestamp), //r7zed289l71ksxoknq6p.png(String), 2019-01-07 15:17:25.0(Timestamp), 2020-08-15 16:47:53.6107176(Timestamp), false(Boolean), [2](String), 5(Integer)
2020-08-15 16:47:53,618 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:47:53,619 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==>  Preparing: insert into jindouyun_log ( `admin`, ip, `type`, `action`, `status`, `result`, `comment`, add_time, update_time ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-08-15 16:47:53,620 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 登录(String), true(Boolean), (String), (String), 2020-08-15 16:47:53.6196934(Timestamp), 2020-08-15 16:47:53.6196934(Timestamp)
2020-08-15 16:47:53,625 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:47:53,626 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT LAST_INSERT_ID() 
2020-08-15 16:47:53,626 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 16:47:53,627 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:47:53,645 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:47:53,646 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 2(Integer), true(Boolean), false(Boolean)
2020-08-15 16:47:53,647 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:47:53,648 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:47:53,648 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 2(Integer), false(Boolean)
2020-08-15 16:47:53,649 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:48:08,882 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 16:48:08,883 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:48:08,883 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 16:48:08.8824567(Timestamp), false(Boolean)
2020-08-15 16:48:08,884 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:48:08,885 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:48:08,885 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 16:48:08.8844819(Timestamp), false(Boolean)
2020-08-15 16:48:08,886 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:48:39,702 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, username, `password`, last_login_ip, last_login_time, avatar, add_time, update_time, deleted, role_ids from jindouyun_admin WHERE ( username = ? and deleted = ? ) 
2020-08-15 16:48:39,703 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), false(Boolean)
2020-08-15 16:48:39,704 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:48:39,793 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==>  Preparing: update jindouyun_admin SET username = ?, `password` = ?, last_login_ip = ?, last_login_time = ?, avatar = ?, add_time = ?, update_time = ?, deleted = ?, role_ids = ? where id = ? 
2020-08-15 16:48:39,794 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), $2a$10$.rEfyBb/GURD9P2p0fRg/OAJGloGNDkJS4lY0cQHeqDgsbdTylBpu(String), 0:0:0:0:0:0:0:1(String), 2020-08-15 16:48:39.7920276(Timestamp), https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif(String), 2018-02-01 00:00:00.0(Timestamp), 2020-08-15 16:48:39.7920276(Timestamp), false(Boolean), [1](String), 1(Integer)
2020-08-15 16:48:39,801 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:48:39,802 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==>  Preparing: insert into jindouyun_log ( `admin`, ip, `type`, `action`, `status`, `result`, `comment`, add_time, update_time ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-08-15 16:48:39,802 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 登录(String), true(Boolean), (String), (String), 2020-08-15 16:48:39.8010286(Timestamp), 2020-08-15 16:48:39.8010286(Timestamp)
2020-08-15 16:48:39,806 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:48:39,807 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT LAST_INSERT_ID() 
2020-08-15 16:48:39,807 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 16:48:39,808 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:48:39,830 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:48:39,831 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:48:39,832 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:48:39,833 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:48:39,834 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:48:39,835 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:48:39,925 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_user WHERE ( deleted = ? ) 
2020-08-15 16:48:39,926 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:48:39,928 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:48:39,929 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods WHERE ( deleted = ? ) 
2020-08-15 16:48:39,930 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:48:39,932 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:48:39,933 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods_product WHERE ( deleted = ? ) 
2020-08-15 16:48:39,934 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:48:39,936 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:48:39,937 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_order WHERE ( deleted = ? ) 
2020-08-15 16:48:39,938 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:48:39,940 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:48:46,760 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:48:46,761 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:48:46,762 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:48:46,764 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:48:46,765 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:48:46,767 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:48:46,769 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:48:46,769 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:48:46,770 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:48:46,771 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:48:46,772 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:48:46,773 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:48:46,775 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample_COUNT [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT count(0) FROM jindouyun_role WHERE (deleted = ?) 
2020-08-15 16:48:46,776 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample_COUNT [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:48:46,778 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample_COUNT [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:48:46,779 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( deleted = ? ) order by add_time desc LIMIT ? 
2020-08-15 16:48:46,780 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean), 20(Integer)
2020-08-15 16:48:46,782 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:48:53,801 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:48:53,801 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:48:53,802 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:48:53,803 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:48:53,804 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:48:53,805 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:48:53,813 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:48:53,813 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:48:53,815 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:48:53,816 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:48:53,816 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:48:53,818 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:48:53,830 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample_COUNT [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT count(0) FROM jindouyun_log WHERE (deleted = ?) 
2020-08-15 16:48:53,831 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample_COUNT [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:48:53,832 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample_COUNT [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:48:53,833 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `admin`, ip, `type`, `action`, `status`, `result`, `comment`, add_time, update_time, deleted from jindouyun_log WHERE ( deleted = ? ) order by add_time desc LIMIT ? 
2020-08-15 16:48:53,833 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean), 20(Integer)
2020-08-15 16:48:53,837 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 20
2020-08-15 16:48:55,523 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( deleted = ? ) 
2020-08-15 16:48:55,524 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:48:55,524 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:48:55,527 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:48:55,528 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:48:55,530 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:48:55,532 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:48:55,533 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:48:55,535 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:48:55,536 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:48:55,537 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:48:55,538 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:48:55,539 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:48:55,540 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:48:55,541 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:48:55,543 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExampleSelective_COUNT [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT count(0) FROM jindouyun_admin WHERE (deleted = ?) 
2020-08-15 16:48:55,544 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExampleSelective_COUNT [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:48:55,546 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExampleSelective_COUNT [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:48:55,547 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExampleSelective [BaseJdbcLogger.java : 159] ==>  Preparing: select id , username , avatar , role_ids from jindouyun_admin WHERE ( deleted = ? ) order by add_time desc LIMIT ? 
2020-08-15 16:48:55,548 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExampleSelective [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean), 20(Integer)
2020-08-15 16:48:55,550 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExampleSelective [BaseJdbcLogger.java : 159] <==      Total: 3
2020-08-15 16:49:08,888 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 16:49:08,888 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:49:08,889 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 16:49:08.8880185(Timestamp), false(Boolean)
2020-08-15 16:49:08,890 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:49:08,891 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:49:08,891 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 16:49:08.8900147(Timestamp), false(Boolean)
2020-08-15 16:49:08,892 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:50:08,892 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 16:50:08,895 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:50:08,896 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 16:50:08.8929979(Timestamp), false(Boolean)
2020-08-15 16:50:08,897 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:50:08,897 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:50:08,897 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 16:50:08.8970159(Timestamp), false(Boolean)
2020-08-15 16:50:08,898 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:50:22,112 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_user WHERE ( deleted = ? ) 
2020-08-15 16:50:22,113 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:50:22,114 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:50:22,116 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods WHERE ( deleted = ? ) 
2020-08-15 16:50:22,116 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:50:22,118 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:50:22,119 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods_product WHERE ( deleted = ? ) 
2020-08-15 16:50:22,120 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:50:22,121 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:50:22,122 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_order WHERE ( deleted = ? ) 
2020-08-15 16:50:22,123 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:50:22,123 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:51:08,901 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 16:51:08,903 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:51:08,903 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 16:51:08.9013342(Timestamp), false(Boolean)
2020-08-15 16:51:08,904 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:51:08,906 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:51:08,906 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 16:51:08.9050948(Timestamp), false(Boolean)
2020-08-15 16:51:08,907 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:52:08,908 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 16:52:08,910 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:52:08,911 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 16:52:08.9081406(Timestamp), false(Boolean)
2020-08-15 16:52:08,911 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:52:08,912 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:52:08,912 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 16:52:08.9121288(Timestamp), false(Boolean)
2020-08-15 16:52:08,913 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:52:22,297 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, username, `password`, last_login_ip, last_login_time, avatar, add_time, update_time, deleted, role_ids from jindouyun_admin WHERE ( username = ? and deleted = ? ) 
2020-08-15 16:52:22,298 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), false(Boolean)
2020-08-15 16:52:22,299 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:52:22,389 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==>  Preparing: update jindouyun_admin SET username = ?, `password` = ?, last_login_ip = ?, last_login_time = ?, avatar = ?, add_time = ?, update_time = ?, deleted = ?, role_ids = ? where id = ? 
2020-08-15 16:52:22,389 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), $2a$10$aCtsc4rG6KmxQ59.IkYse.oRyKuwQoU2CPCmxSdB.d5nXq6aw/z4O(String), 0:0:0:0:0:0:0:1(String), 2020-08-15 16:52:22.3887267(Timestamp), //r7zed289l71ksxoknq6p.png(String), 2019-01-07 15:17:25.0(Timestamp), 2020-08-15 16:52:22.3887267(Timestamp), false(Boolean), [2](String), 5(Integer)
2020-08-15 16:52:22,397 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:52:22,398 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==>  Preparing: insert into jindouyun_log ( `admin`, ip, `type`, `action`, `status`, `result`, `comment`, add_time, update_time ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-08-15 16:52:22,399 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 登录(String), true(Boolean), (String), (String), 2020-08-15 16:52:22.3977025(Timestamp), 2020-08-15 16:52:22.3977025(Timestamp)
2020-08-15 16:52:22,404 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:52:22,405 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT LAST_INSERT_ID() 
2020-08-15 16:52:22,405 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 16:52:22,406 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:52:22,429 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:52:22,430 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 2(Integer), true(Boolean), false(Boolean)
2020-08-15 16:52:22,431 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:52:22,431 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:52:22,432 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 2(Integer), false(Boolean)
2020-08-15 16:52:22,434 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:52:23,941 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, username, `password`, last_login_ip, last_login_time, avatar, add_time, update_time, deleted, role_ids from jindouyun_admin WHERE ( username = ? and deleted = ? ) 
2020-08-15 16:52:23,941 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), false(Boolean)
2020-08-15 16:52:23,943 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:52:24,036 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==>  Preparing: update jindouyun_admin SET username = ?, `password` = ?, last_login_ip = ?, last_login_time = ?, avatar = ?, add_time = ?, update_time = ?, deleted = ?, role_ids = ? where id = ? 
2020-08-15 16:52:24,037 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), $2a$10$aCtsc4rG6KmxQ59.IkYse.oRyKuwQoU2CPCmxSdB.d5nXq6aw/z4O(String), 0:0:0:0:0:0:0:1(String), 2020-08-15 16:52:24.0353238(Timestamp), //r7zed289l71ksxoknq6p.png(String), 2019-01-07 15:17:25.0(Timestamp), 2020-08-15 16:52:24.0353238(Timestamp), false(Boolean), [2](String), 5(Integer)
2020-08-15 16:52:24,043 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:52:24,044 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==>  Preparing: insert into jindouyun_log ( `admin`, ip, `type`, `action`, `status`, `result`, `comment`, add_time, update_time ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-08-15 16:52:24,044 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 登录(String), true(Boolean), (String), (String), 2020-08-15 16:52:24.0433018(Timestamp), 2020-08-15 16:52:24.0433018(Timestamp)
2020-08-15 16:52:24,049 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:52:24,050 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT LAST_INSERT_ID() 
2020-08-15 16:52:24,050 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 16:52:24,051 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:52:24,071 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:52:24,072 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 2(Integer), true(Boolean), false(Boolean)
2020-08-15 16:52:24,073 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:52:24,074 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:52:24,074 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 2(Integer), false(Boolean)
2020-08-15 16:52:24,075 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:53:08,915 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 16:53:08,915 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:53:08,916 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 16:53:08.9154051(Timestamp), false(Boolean)
2020-08-15 16:53:08,917 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:53:08,917 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:53:08,918 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 16:53:08.9174008(Timestamp), false(Boolean)
2020-08-15 16:53:08,918 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:53:41,763 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:53:41,764 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 16:53:41,766 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:53:41,768 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 16:53:41,768 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 16:53:41,770 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:53:41,943 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_user WHERE ( deleted = ? ) 
2020-08-15 16:53:41,944 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:53:41,945 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:53:41,946 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods WHERE ( deleted = ? ) 
2020-08-15 16:53:41,946 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:53:41,951 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:53:41,952 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods_product WHERE ( deleted = ? ) 
2020-08-15 16:53:41,952 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:53:41,957 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:53:41,958 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_order WHERE ( deleted = ? ) 
2020-08-15 16:53:41,959 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:53:41,960 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:53:48,394 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==>  Preparing: insert into jindouyun_log ( `admin`, ip, `type`, `action`, `status`, `result`, `comment`, add_time, update_time ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-08-15 16:53:48,395 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 退出(String), true(Boolean), (String), (String), 2020-08-15 16:53:48.394973(Timestamp), 2020-08-15 16:53:48.394973(Timestamp)
2020-08-15 16:53:48,402 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:53:48,403 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT LAST_INSERT_ID() 
2020-08-15 16:53:48,404 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 16:53:48,405 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:53:58,802 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, username, `password`, last_login_ip, last_login_time, avatar, add_time, update_time, deleted, role_ids from jindouyun_admin WHERE ( username = ? and deleted = ? ) 
2020-08-15 16:53:58,803 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), false(Boolean)
2020-08-15 16:53:58,807 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:53:58,898 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==>  Preparing: update jindouyun_admin SET username = ?, `password` = ?, last_login_ip = ?, last_login_time = ?, avatar = ?, add_time = ?, update_time = ?, deleted = ?, role_ids = ? where id = ? 
2020-08-15 16:53:58,899 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), $2a$10$aCtsc4rG6KmxQ59.IkYse.oRyKuwQoU2CPCmxSdB.d5nXq6aw/z4O(String), 0:0:0:0:0:0:0:1(String), 2020-08-15 16:53:58.898343(Timestamp), http://49.235.20.228:9000/litemall/q3yxciaw91hdwp6iai66.gif(String), 2019-01-07 15:17:25.0(Timestamp), 2020-08-15 16:53:58.898343(Timestamp), false(Boolean), [2,3](String), 5(Integer)
2020-08-15 16:53:58,904 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:53:58,905 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==>  Preparing: insert into jindouyun_log ( `admin`, ip, `type`, `action`, `status`, `result`, `comment`, add_time, update_time ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-08-15 16:53:58,906 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 登录(String), true(Boolean), (String), (String), 2020-08-15 16:53:58.9053508(Timestamp), 2020-08-15 16:53:58.9053508(Timestamp)
2020-08-15 16:53:58,910 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:53:58,911 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT LAST_INSERT_ID() 
2020-08-15 16:53:58,911 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 16:53:58,912 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:53:58,934 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? , ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:53:58,934 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 2(Integer), 3(Integer), true(Boolean), false(Boolean)
2020-08-15 16:53:58,935 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 2
2020-08-15 16:53:58,937 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? , ? ) and deleted = ? ) 
2020-08-15 16:53:58,938 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 2(Integer), 3(Integer), false(Boolean)
2020-08-15 16:53:58,940 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 20
2020-08-15 16:53:58,994 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_user WHERE ( deleted = ? ) 
2020-08-15 16:53:58,994 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:53:58,996 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:53:58,996 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods WHERE ( deleted = ? ) 
2020-08-15 16:53:58,997 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:53:58,998 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:53:58,999 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods_product WHERE ( deleted = ? ) 
2020-08-15 16:53:58,999 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:53:59,000 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:53:59,001 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_order WHERE ( deleted = ? ) 
2020-08-15 16:53:59,001 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:53:59,002 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:54:01,994 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, username, `password`, last_login_ip, last_login_time, avatar, add_time, update_time, deleted, role_ids from jindouyun_admin WHERE ( username = ? and deleted = ? ) 
2020-08-15 16:54:01,995 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), false(Boolean)
2020-08-15 16:54:01,997 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:54:02,088 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==>  Preparing: update jindouyun_admin SET username = ?, `password` = ?, last_login_ip = ?, last_login_time = ?, avatar = ?, add_time = ?, update_time = ?, deleted = ?, role_ids = ? where id = ? 
2020-08-15 16:54:02,089 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), $2a$10$aCtsc4rG6KmxQ59.IkYse.oRyKuwQoU2CPCmxSdB.d5nXq6aw/z4O(String), 0:0:0:0:0:0:0:1(String), 2020-08-15 16:54:02.0889285(Timestamp), http://49.235.20.228:9000/litemall/q3yxciaw91hdwp6iai66.gif(String), 2019-01-07 15:17:25.0(Timestamp), 2020-08-15 16:54:02.0889285(Timestamp), false(Boolean), [2,3](String), 5(Integer)
2020-08-15 16:54:02,094 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:54:02,095 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==>  Preparing: insert into jindouyun_log ( `admin`, ip, `type`, `action`, `status`, `result`, `comment`, add_time, update_time ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-08-15 16:54:02,095 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 登录(String), true(Boolean), (String), (String), 2020-08-15 16:54:02.0949109(Timestamp), 2020-08-15 16:54:02.0949109(Timestamp)
2020-08-15 16:54:02,100 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:54:02,100 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT LAST_INSERT_ID() 
2020-08-15 16:54:02,101 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 16:54:02,101 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:54:02,127 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? , ? ) and enabled = ? and deleted = ? ) 
2020-08-15 16:54:02,128 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 2(Integer), 3(Integer), true(Boolean), false(Boolean)
2020-08-15 16:54:02,129 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 2
2020-08-15 16:54:02,130 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? , ? ) and deleted = ? ) 
2020-08-15 16:54:02,130 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 2(Integer), 3(Integer), false(Boolean)
2020-08-15 16:54:02,131 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 20
2020-08-15 16:54:02,376 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_user WHERE ( deleted = ? ) 
2020-08-15 16:54:02,377 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:54:02,378 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:54:02,380 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods WHERE ( deleted = ? ) 
2020-08-15 16:54:02,381 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:54:02,382 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:54:02,384 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods_product WHERE ( deleted = ? ) 
2020-08-15 16:54:02,384 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:54:02,386 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:54:02,388 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_order WHERE ( deleted = ? ) 
2020-08-15 16:54:02,389 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 16:54:02,390 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:54:08,919 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 16:54:08,919 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:54:08,920 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 16:54:08.9197843(Timestamp), false(Boolean)
2020-08-15 16:54:08,923 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:54:08,924 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:54:08,924 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 16:54:08.9237588(Timestamp), false(Boolean)
2020-08-15 16:54:08,926 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:55:08,927 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 16:55:08,930 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:55:08,930 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 16:55:08.9276501(Timestamp), false(Boolean)
2020-08-15 16:55:08,931 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:55:08,932 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:55:08,932 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 16:55:08.931589(Timestamp), false(Boolean)
2020-08-15 16:55:08,932 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:56:08,935 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 16:56:08,937 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:56:08,938 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 16:56:08.9350761(Timestamp), false(Boolean)
2020-08-15 16:56:08,938 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:56:08,939 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:56:08,939 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 16:56:08.9398505(Timestamp), false(Boolean)
2020-08-15 16:56:08,940 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:57:08,942 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 16:57:08,944 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:57:08,945 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 16:57:08.9422434(Timestamp), false(Boolean)
2020-08-15 16:57:08,946 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:57:08,947 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:57:08,948 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 16:57:08.9472311(Timestamp), false(Boolean)
2020-08-15 16:57:08,948 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:57:41,212 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==>  Preparing: insert into jindouyun_log ( `admin`, ip, `type`, `action`, `status`, `result`, `comment`, add_time, update_time ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-08-15 16:57:41,213 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 退出(String), true(Boolean), (String), (String), 2020-08-15 16:57:41.2123072(Timestamp), 2020-08-15 16:57:41.2123072(Timestamp)
2020-08-15 16:57:41,219 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 16:57:41,220 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT LAST_INSERT_ID() 
2020-08-15 16:57:41,221 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 16:57:41,221 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 16:58:08,950 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 16:58:08,950 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:58:08,951 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 16:58:08.9508891(Timestamp), false(Boolean)
2020-08-15 16:58:08,952 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:58:08,952 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:58:08,953 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 16:58:08.9528733(Timestamp), false(Boolean)
2020-08-15 16:58:08,953 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:59:08,955 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 16:59:08,957 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:59:08,958 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 16:59:08.9553157(Timestamp), false(Boolean)
2020-08-15 16:59:08,958 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 16:59:08,959 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 16:59:08,959 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 16:59:08.9591199(Timestamp), false(Boolean)
2020-08-15 16:59:08,960 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:00:08,961 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 17:00:08,963 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:00:08,964 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 17:00:08.9610577(Timestamp), false(Boolean)
2020-08-15 17:00:08,965 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:00:08,966 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:00:08,966 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 17:00:08.9650671(Timestamp), false(Boolean)
2020-08-15 17:00:08,967 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:01:08,969 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 17:01:08,971 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:01:08,972 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 17:01:08.9691062(Timestamp), false(Boolean)
2020-08-15 17:01:08,972 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:01:08,973 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:01:08,973 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 17:01:08.9730882(Timestamp), false(Boolean)
2020-08-15 17:01:08,974 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:01:27,566 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, username, `password`, last_login_ip, last_login_time, avatar, add_time, update_time, deleted, role_ids from jindouyun_admin WHERE ( username = ? and deleted = ? ) 
2020-08-15 17:01:27,567 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), false(Boolean)
2020-08-15 17:01:27,569 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:01:27,660 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==>  Preparing: update jindouyun_admin SET username = ?, `password` = ?, last_login_ip = ?, last_login_time = ?, avatar = ?, add_time = ?, update_time = ?, deleted = ?, role_ids = ? where id = ? 
2020-08-15 17:01:27,661 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), $2a$10$aCtsc4rG6KmxQ59.IkYse.oRyKuwQoU2CPCmxSdB.d5nXq6aw/z4O(String), 0:0:0:0:0:0:0:1(String), 2020-08-15 17:01:27.6606677(Timestamp), http://49.235.20.228:9000/litemall/q3yxciaw91hdwp6iai66.gif(String), 2019-01-07 15:17:25.0(Timestamp), 2020-08-15 17:01:27.6606677(Timestamp), false(Boolean), [2,3](String), 5(Integer)
2020-08-15 17:01:27,667 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 17:01:27,668 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==>  Preparing: insert into jindouyun_log ( `admin`, ip, `type`, `action`, `status`, `result`, `comment`, add_time, update_time ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-08-15 17:01:27,669 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==> Parameters: mall123(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 登录(String), true(Boolean), (String), (String), 2020-08-15 17:01:27.6686105(Timestamp), 2020-08-15 17:01:27.6686105(Timestamp)
2020-08-15 17:01:27,673 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 17:01:27,674 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT LAST_INSERT_ID() 
2020-08-15 17:01:27,674 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 17:01:27,675 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:01:27,695 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? , ? ) and enabled = ? and deleted = ? ) 
2020-08-15 17:01:27,696 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 2(Integer), 3(Integer), true(Boolean), false(Boolean)
2020-08-15 17:01:27,698 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 2
2020-08-15 17:01:27,700 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? , ? ) and deleted = ? ) 
2020-08-15 17:01:27,701 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 2(Integer), 3(Integer), false(Boolean)
2020-08-15 17:01:27,702 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 20
2020-08-15 17:01:27,749 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_user WHERE ( deleted = ? ) 
2020-08-15 17:01:27,750 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 17:01:27,751 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:01:27,752 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods WHERE ( deleted = ? ) 
2020-08-15 17:01:27,752 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 17:01:27,753 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:01:27,754 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods_product WHERE ( deleted = ? ) 
2020-08-15 17:01:27,754 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 17:01:27,756 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:01:27,757 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_order WHERE ( deleted = ? ) 
2020-08-15 17:01:27,757 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 17:01:27,759 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:02:08,975 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 17:02:08,975 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:02:08,976 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 17:02:08.9753814(Timestamp), false(Boolean)
2020-08-15 17:02:08,977 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:02:08,978 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:02:08,978 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 17:02:08.9773401(Timestamp), false(Boolean)
2020-08-15 17:02:08,979 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:44:33,605 DEBUG [restartedMain] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, key_name, key_value, add_time, update_time, deleted from jindouyun_system WHERE ( deleted = ? ) 
2020-08-15 17:44:33,626 DEBUG [restartedMain] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 17:44:33,653 DEBUG [restartedMain] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 20
2020-08-15 17:44:35,732 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 17:44:35,749 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:44:35,751 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 17:44:35.7406974(Timestamp), false(Boolean)
2020-08-15 17:44:35,754 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:44:35,763 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:44:35,764 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 17:44:35.7596145(Timestamp), false(Boolean)
2020-08-15 17:44:35,766 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:44:49,148 WARN [http-nio-8080-exec-1] c.j.a.config.ShiroExceptionHandler [ShiroExceptionHandler.java : 30] The current Subject is not authenticated.  Access denied.
org.apache.shiro.authz.UnauthenticatedException: The current Subject is not authenticated.  Access denied.
	at org.apache.shiro.authz.aop.AuthenticatedAnnotationHandler.assertAuthorized(AuthenticatedAnnotationHandler.java:53)
	at org.apache.shiro.authz.aop.AuthorizingAnnotationMethodInterceptor.assertAuthorized(AuthorizingAnnotationMethodInterceptor.java:84)
	at org.apache.shiro.authz.aop.AnnotationsAuthorizingMethodInterceptor.assertAuthorized(AnnotationsAuthorizingMethodInterceptor.java:100)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:38)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.jindouyun.admin.controller.AdminAuthController$$EnhancerBySpringCGLIB$$9eec696.info(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:387)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: org.apache.shiro.authz.AuthorizationException: Not authorized to invoke method: public java.lang.Object com.jindouyun.admin.controller.AdminAuthController.info()
	at org.apache.shiro.authz.aop.AuthorizingAnnotationMethodInterceptor.assertAuthorized(AuthorizingAnnotationMethodInterceptor.java:90)
	... 76 common frames omitted
2020-08-15 17:45:28,578 ERROR [restartedMain] c.alibaba.druid.pool.DruidDataSource [DruidDataSource.java : 872] init datasource error, url: jdbc:mysql://localhost:3306/test_jindouyun?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true&verifyServerCertificate=false&useSSL=false
java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:835)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:455)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:199)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:156)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:218)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:150)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1560)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1623)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:861)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1903)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1846)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1774)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1500)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1395)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.autowireResource(CommonAnnotationBeanPostProcessor.java:520)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.getResource(CommonAnnotationBeanPostProcessor.java:496)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$ResourceElement.getResourceToInject(CommonAnnotationBeanPostProcessor.java:636)
	at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:180)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessProperties(CommonAnnotationBeanPostProcessor.java:321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:593)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:374)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.resolveBeanReference(ConfigurationClassEnhancer.java:394)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:366)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$70c665fd.realm(<generated>)
	at com.jindouyun.admin.config.ShiroConfig.defaultWebSecurityManager(ShiroConfig.java:58)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$70c665fd.CGLIB$defaultWebSecurityManager$4(<generated>)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$70c665fd$$FastClassBySpringCGLIB$$bd6670b8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$70c665fd.defaultWebSecurityManager(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getSingletonFactoryBeanForTypeCheck(AbstractAutowireCapableBeanFactory.java:991)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:865)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:574)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:516)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:479)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:227)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1412)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1211)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.aop.framework.autoproxy.BeanFactoryAdvisorRetrievalHelper.findAdvisorBeans(BeanFactoryAdvisorRetrievalHelper.java:91)
	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findCandidateAdvisors(AbstractAdvisorAutoProxyCreator.java:109)
	at org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.findCandidateAdvisors(AnnotationAwareAspectJAutoProxyCreator.java:92)
	at org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.shouldSkip(AspectJAwareAdvisorAutoProxyCreator.java:101)
	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessBeforeInstantiation(AbstractAutoProxyCreator.java:251)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:1124)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:1097)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:504)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:240)
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:721)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:534)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.jindouyun.all.Application.main(Application.java:16)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-08-15 17:45:28,587 ERROR [restartedMain] c.alibaba.druid.pool.DruidDataSource [DruidDataSource.java : 905] {dataSource-1} init error
java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:835)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:455)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:199)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:156)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:218)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:150)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1560)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1623)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:861)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1903)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1846)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1774)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1500)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1395)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.autowireResource(CommonAnnotationBeanPostProcessor.java:520)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.getResource(CommonAnnotationBeanPostProcessor.java:496)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$ResourceElement.getResourceToInject(CommonAnnotationBeanPostProcessor.java:636)
	at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:180)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessProperties(CommonAnnotationBeanPostProcessor.java:321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:593)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:374)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.resolveBeanReference(ConfigurationClassEnhancer.java:394)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:366)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$70c665fd.realm(<generated>)
	at com.jindouyun.admin.config.ShiroConfig.defaultWebSecurityManager(ShiroConfig.java:58)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$70c665fd.CGLIB$defaultWebSecurityManager$4(<generated>)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$70c665fd$$FastClassBySpringCGLIB$$bd6670b8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$70c665fd.defaultWebSecurityManager(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getSingletonFactoryBeanForTypeCheck(AbstractAutowireCapableBeanFactory.java:991)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:865)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:574)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:516)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:479)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:227)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1412)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1211)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.aop.framework.autoproxy.BeanFactoryAdvisorRetrievalHelper.findAdvisorBeans(BeanFactoryAdvisorRetrievalHelper.java:91)
	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findCandidateAdvisors(AbstractAdvisorAutoProxyCreator.java:109)
	at org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.findCandidateAdvisors(AnnotationAwareAspectJAutoProxyCreator.java:92)
	at org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.shouldSkip(AspectJAwareAdvisorAutoProxyCreator.java:101)
	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessBeforeInstantiation(AbstractAutoProxyCreator.java:251)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:1124)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:1097)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:504)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:240)
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:721)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:534)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.jindouyun.all.Application.main(Application.java:16)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-08-15 17:45:28,591 ERROR [Druid-ConnectionPool-Create-573807248] c.alibaba.druid.pool.DruidDataSource [DruidDataSource.java : 2471] create connection SQLException, url: jdbc:mysql://localhost:3306/test_jindouyun?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true&verifyServerCertificate=false&useSSL=false, errorCode 1044, state 42000
java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:835)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:455)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:199)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:156)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:218)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:150)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1560)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1623)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2468)
2020-08-15 17:45:28,595 ERROR [Druid-ConnectionPool-Create-573807248] c.alibaba.druid.pool.DruidDataSource [DruidDataSource.java : 2471] create connection SQLException, url: jdbc:mysql://localhost:3306/test_jindouyun?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true&verifyServerCertificate=false&useSSL=false, errorCode 1044, state 42000
java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:835)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:455)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:199)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:156)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:218)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:150)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1560)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1623)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2468)
2020-08-15 17:45:28,613 ERROR [restartedMain] o.s.boot.SpringApplication [SpringApplication.java : 858] Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'objectMapperConfigurer' defined in class path resource [springfox/documentation/spring/web/SpringfoxWebMvcConfiguration.class]: BeanPostProcessor before instantiation of bean failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'authorizationAttributeSourceAdvisor' defined in class path resource [com/jindouyun/admin/config/ShiroConfig.class]: Unsatisfied dependency expressed through method 'authorizationAttributeSourceAdvisor' parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'shiroFilterFactoryBean' defined in class path resource [com/jindouyun/admin/config/ShiroConfig.class]: Unsatisfied dependency expressed through method 'shiroFilterFactoryBean' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'defaultWebSecurityManager' defined in class path resource [com/jindouyun/admin/config/ShiroConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.shiro.web.mgt.DefaultWebSecurityManager]: Factory method 'defaultWebSecurityManager' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'realm': Unsatisfied dependency expressed through field 'adminService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jindouyunAdminService': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jindouyunAdminMapper' defined in file [Z:\JinDouYun\jindouyun-db\target\classes\com\jindouyun\db\dao\JindouyunAdminMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:240)
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:721)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:534)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.jindouyun.all.Application.main(Application.java:16)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'authorizationAttributeSourceAdvisor' defined in class path resource [com/jindouyun/admin/config/ShiroConfig.class]: Unsatisfied dependency expressed through method 'authorizationAttributeSourceAdvisor' parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'shiroFilterFactoryBean' defined in class path resource [com/jindouyun/admin/config/ShiroConfig.class]: Unsatisfied dependency expressed through method 'shiroFilterFactoryBean' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'defaultWebSecurityManager' defined in class path resource [com/jindouyun/admin/config/ShiroConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.shiro.web.mgt.DefaultWebSecurityManager]: Factory method 'defaultWebSecurityManager' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'realm': Unsatisfied dependency expressed through field 'adminService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jindouyunAdminService': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jindouyunAdminMapper' defined in file [Z:\JinDouYun\jindouyun-db\target\classes\com\jindouyun\db\dao\JindouyunAdminMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:769)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.aop.framework.autoproxy.BeanFactoryAdvisorRetrievalHelper.findAdvisorBeans(BeanFactoryAdvisorRetrievalHelper.java:91)
	at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findCandidateAdvisors(AbstractAdvisorAutoProxyCreator.java:109)
	at org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.findCandidateAdvisors(AnnotationAwareAspectJAutoProxyCreator.java:92)
	at org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.shouldSkip(AspectJAwareAdvisorAutoProxyCreator.java:101)
	at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessBeforeInstantiation(AbstractAutoProxyCreator.java:251)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:1124)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:1097)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:504)
	... 19 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'shiroFilterFactoryBean' defined in class path resource [com/jindouyun/admin/config/ShiroConfig.class]: Unsatisfied dependency expressed through method 'shiroFilterFactoryBean' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'defaultWebSecurityManager' defined in class path resource [com/jindouyun/admin/config/ShiroConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.shiro.web.mgt.DefaultWebSecurityManager]: Factory method 'defaultWebSecurityManager' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'realm': Unsatisfied dependency expressed through field 'adminService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jindouyunAdminService': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jindouyunAdminMapper' defined in file [Z:\JinDouYun\jindouyun-db\target\classes\com\jindouyun\db\dao\JindouyunAdminMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:769)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getSingletonFactoryBeanForTypeCheck(AbstractAutowireCapableBeanFactory.java:991)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:865)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:574)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:516)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:479)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:227)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1412)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1211)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	... 36 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'defaultWebSecurityManager' defined in class path resource [com/jindouyun/admin/config/ShiroConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.shiro.web.mgt.DefaultWebSecurityManager]: Factory method 'defaultWebSecurityManager' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'realm': Unsatisfied dependency expressed through field 'adminService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jindouyunAdminService': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jindouyunAdminMapper' defined in file [Z:\JinDouYun\jindouyun-db\target\classes\com\jindouyun\db\dao\JindouyunAdminMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:627)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	... 50 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.shiro.web.mgt.DefaultWebSecurityManager]: Factory method 'defaultWebSecurityManager' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'realm': Unsatisfied dependency expressed through field 'adminService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jindouyunAdminService': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jindouyunAdminMapper' defined in file [Z:\JinDouYun\jindouyun-db\target\classes\com\jindouyun\db\dao\JindouyunAdminMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	... 64 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'realm': Unsatisfied dependency expressed through field 'adminService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jindouyunAdminService': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jindouyunAdminMapper' defined in file [Z:\JinDouYun\jindouyun-db\target\classes\com\jindouyun\db\dao\JindouyunAdminMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:596)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:374)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.resolveBeanReference(ConfigurationClassEnhancer.java:394)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:366)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$70c665fd.realm(<generated>)
	at com.jindouyun.admin.config.ShiroConfig.defaultWebSecurityManager(ShiroConfig.java:58)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$70c665fd.CGLIB$defaultWebSecurityManager$4(<generated>)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$70c665fd$$FastClassBySpringCGLIB$$bd6670b8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at com.jindouyun.admin.config.ShiroConfig$$EnhancerBySpringCGLIB$$70c665fd.defaultWebSecurityManager(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 65 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jindouyunAdminService': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jindouyunAdminMapper' defined in file [Z:\JinDouYun\jindouyun-db\target\classes\com\jindouyun\db\dao\JindouyunAdminMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessProperties(CommonAnnotationBeanPostProcessor.java:324)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1411)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:593)
	... 88 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jindouyunAdminMapper' defined in file [Z:\JinDouYun\jindouyun-db\target\classes\com\jindouyun\db\dao\JindouyunAdminMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1515)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1395)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.autowireResource(CommonAnnotationBeanPostProcessor.java:520)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.getResource(CommonAnnotationBeanPostProcessor.java:496)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$ResourceElement.getResourceToInject(CommonAnnotationBeanPostProcessor.java:636)
	at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:180)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessProperties(CommonAnnotationBeanPostProcessor.java:321)
	... 99 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Unsatisfied dependency expressed through method 'sqlSessionFactory' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:769)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1500)
	... 115 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.class]: Invocation of init method failed; nested exception is java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1778)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1248)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1168)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	... 128 common frames omitted
Caused by: java.sql.SQLSyntaxErrorException: Access denied for user 'jindouyun'@'%' to database 'test_jindouyun'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:835)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:455)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:199)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:156)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:218)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:150)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1560)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1623)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:861)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1903)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1846)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1774)
	... 139 common frames omitted
2020-08-15 17:46:05,921 DEBUG [restartedMain] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, key_name, key_value, add_time, update_time, deleted from jindouyun_system WHERE ( deleted = ? ) 
2020-08-15 17:46:05,942 DEBUG [restartedMain] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 17:46:05,971 DEBUG [restartedMain] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 20
2020-08-15 17:46:08,217 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 17:46:08,236 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:46:08,238 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 17:46:08.2271729(Timestamp), false(Boolean)
2020-08-15 17:46:08,240 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:46:08,250 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:46:08,251 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 17:46:08.2461217(Timestamp), false(Boolean)
2020-08-15 17:46:08,252 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:46:12,937 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, username, `password`, last_login_ip, last_login_time, avatar, add_time, update_time, deleted, role_ids from jindouyun_admin WHERE ( username = ? and deleted = ? ) 
2020-08-15 17:46:12,938 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), false(Boolean)
2020-08-15 17:46:12,944 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:46:13,049 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==>  Preparing: update jindouyun_admin SET username = ?, `password` = ?, last_login_ip = ?, last_login_time = ?, avatar = ?, add_time = ?, update_time = ?, deleted = ?, role_ids = ? where id = ? 
2020-08-15 17:46:13,062 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), $2a$10$2g8ffw7OSbKjYwsdJCy4qO1FZfT.zd.B75pCMYy09Rhuw9djQy43G(String), 0:0:0:0:0:0:0:1(String), 2020-08-15 17:46:13.0487674(Timestamp), https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif(String), 2018-02-01 00:00:00.0(Timestamp), 2020-08-15 17:46:13.0487674(Timestamp), false(Boolean), [1](String), 1(Integer)
2020-08-15 17:46:13,070 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 17:46:13,073 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==>  Preparing: insert into jindouyun_log ( `admin`, ip, `type`, `action`, `status`, `result`, `comment`, add_time, update_time ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-08-15 17:46:13,074 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 登录(String), true(Boolean), (String), (String), 2020-08-15 17:46:13.0727029(Timestamp), 2020-08-15 17:46:13.0727029(Timestamp)
2020-08-15 17:46:13,079 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 17:46:13,080 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT LAST_INSERT_ID() 
2020-08-15 17:46:13,080 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 17:46:13,081 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:46:13,137 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 17:46:13,138 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 17:46:13,140 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:46:13,149 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 17:46:13,151 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 17:46:13,154 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:46:13,325 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_user WHERE ( deleted = ? ) 
2020-08-15 17:46:13,326 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 17:46:13,327 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:46:13,337 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods WHERE ( deleted = ? ) 
2020-08-15 17:46:13,338 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 17:46:13,339 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:46:13,348 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods_product WHERE ( deleted = ? ) 
2020-08-15 17:46:13,349 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 17:46:13,351 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:46:13,363 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_order WHERE ( deleted = ? ) 
2020-08-15 17:46:13,363 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 17:46:13,365 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:46:19,684 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 17:46:19,684 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 17:46:19,685 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 17:46:19,685 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 17:46:19,688 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:46:19,688 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:46:19,693 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 17:46:19,693 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 17:46:19,695 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 17:46:19,695 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 17:46:19,697 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:46:19,697 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:46:19,737 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 17:46:19,737 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 17:46:19,738 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 17:46:19,738 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 17:46:19,740 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:46:19,740 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:46:19,742 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 17:46:19,742 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 17:46:19,743 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 17:46:19,743 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 17:46:19,744 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:46:19,744 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:46:19,760 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( `level` = ? and deleted = ? ) 
2020-08-15 17:46:19,760 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 17:46:19,761 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Integer), false(Boolean)
2020-08-15 17:46:19,761 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: L1(String), false(Boolean)
2020-08-15 17:46:19,773 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 10
2020-08-15 17:46:19,774 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 10
2020-08-15 17:46:19,778 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 17:46:19,779 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1005000(Integer), false(Boolean)
2020-08-15 17:46:19,783 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 10
2020-08-15 17:46:19,785 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 17:46:19,786 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1005001(Integer), false(Boolean)
2020-08-15 17:46:19,791 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 9
2020-08-15 17:46:19,793 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 17:46:19,794 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1005002(Integer), false(Boolean)
2020-08-15 17:46:19,797 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 10
2020-08-15 17:46:19,798 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 17:46:19,799 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1008000(Integer), false(Boolean)
2020-08-15 17:46:19,801 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 9
2020-08-15 17:46:19,803 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 17:46:19,804 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1010000(Integer), false(Boolean)
2020-08-15 17:46:19,806 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 11
2020-08-15 17:46:19,808 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 17:46:19,809 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1011000(Integer), false(Boolean)
2020-08-15 17:46:19,812 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 7
2020-08-15 17:46:19,813 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 17:46:19,814 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1012000(Integer), false(Boolean)
2020-08-15 17:46:19,815 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 10
2020-08-15 17:46:19,817 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 17:46:19,818 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1013001(Integer), false(Boolean)
2020-08-15 17:46:19,821 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 7
2020-08-15 17:46:19,822 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 17:46:19,823 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1019000(Integer), false(Boolean)
2020-08-15 17:46:19,825 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 11
2020-08-15 17:46:19,827 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 17:46:19,827 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1036008(Integer), false(Boolean)
2020-08-15 17:46:19,828 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:47:08,254 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 17:47:08,255 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:47:08,256 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 17:47:08.2546837(Timestamp), false(Boolean)
2020-08-15 17:47:08,260 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:47:08,261 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:47:08,261 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 17:47:08.260614(Timestamp), false(Boolean)
2020-08-15 17:47:08,262 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:48:08,265 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 17:48:08,269 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:48:08,270 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 17:48:08.2651397(Timestamp), false(Boolean)
2020-08-15 17:48:08,271 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:48:08,272 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:48:08,273 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 17:48:08.2721233(Timestamp), false(Boolean)
2020-08-15 17:48:08,274 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:49:08,276 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 17:49:08,280 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:49:08,281 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 17:49:08.2762958(Timestamp), false(Boolean)
2020-08-15 17:49:08,282 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:49:08,283 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:49:08,284 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 17:49:08.2833121(Timestamp), false(Boolean)
2020-08-15 17:49:08,284 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:50:08,286 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 17:50:08,289 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:50:08,290 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 17:50:08.2867415(Timestamp), false(Boolean)
2020-08-15 17:50:08,291 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:50:08,292 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:50:08,293 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 17:50:08.2916547(Timestamp), false(Boolean)
2020-08-15 17:50:08,294 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:51:08,296 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 17:51:08,300 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:51:08,301 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 17:51:08.2964605(Timestamp), false(Boolean)
2020-08-15 17:51:08,302 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:51:08,304 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:51:08,304 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 17:51:08.3034408(Timestamp), false(Boolean)
2020-08-15 17:51:08,305 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:52:08,308 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 17:52:08,310 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:52:08,311 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 17:52:08.308017(Timestamp), false(Boolean)
2020-08-15 17:52:08,312 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:52:08,313 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:52:08,313 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 17:52:08.3127472(Timestamp), false(Boolean)
2020-08-15 17:52:08,314 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:53:08,317 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 17:53:08,319 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:53:08,320 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 17:53:08.3173833(Timestamp), false(Boolean)
2020-08-15 17:53:08,321 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:53:08,322 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:53:08,323 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 17:53:08.3213625(Timestamp), false(Boolean)
2020-08-15 17:53:08,324 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:54:06,636 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, username, `password`, last_login_ip, last_login_time, avatar, add_time, update_time, deleted, role_ids from jindouyun_admin WHERE ( username = ? and deleted = ? ) 
2020-08-15 17:54:06,637 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), false(Boolean)
2020-08-15 17:54:06,640 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:54:06,743 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==>  Preparing: update jindouyun_admin SET username = ?, `password` = ?, last_login_ip = ?, last_login_time = ?, avatar = ?, add_time = ?, update_time = ?, deleted = ?, role_ids = ? where id = ? 
2020-08-15 17:54:06,744 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), $2a$10$2g8ffw7OSbKjYwsdJCy4qO1FZfT.zd.B75pCMYy09Rhuw9djQy43G(String), 0:0:0:0:0:0:0:1(String), 2020-08-15 17:54:06.7432312(Timestamp), https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif(String), 2018-02-01 00:00:00.0(Timestamp), 2020-08-15 17:54:06.7432312(Timestamp), false(Boolean), [1](String), 1(Integer)
2020-08-15 17:54:06,751 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 17:54:06,752 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==>  Preparing: insert into jindouyun_log ( `admin`, ip, `type`, `action`, `status`, `result`, `comment`, add_time, update_time ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-08-15 17:54:06,753 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 登录(String), true(Boolean), (String), (String), 2020-08-15 17:54:06.7522061(Timestamp), 2020-08-15 17:54:06.7522061(Timestamp)
2020-08-15 17:54:06,758 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 17:54:06,759 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT LAST_INSERT_ID() 
2020-08-15 17:54:06,760 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 17:54:06,761 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:54:08,325 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 17:54:08,326 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:54:08,326 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 17:54:08.3259801(Timestamp), false(Boolean)
2020-08-15 17:54:08,327 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:54:08,328 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:54:08,329 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 17:54:08.3289722(Timestamp), false(Boolean)
2020-08-15 17:54:08,330 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:54:28,520 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, username, `password`, last_login_ip, last_login_time, avatar, add_time, update_time, deleted, role_ids from jindouyun_admin WHERE ( username = ? and deleted = ? ) 
2020-08-15 17:54:28,521 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), false(Boolean)
2020-08-15 17:54:28,522 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:54:28,620 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==>  Preparing: update jindouyun_admin SET username = ?, `password` = ?, last_login_ip = ?, last_login_time = ?, avatar = ?, add_time = ?, update_time = ?, deleted = ?, role_ids = ? where id = ? 
2020-08-15 17:54:28,622 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), $2a$10$2g8ffw7OSbKjYwsdJCy4qO1FZfT.zd.B75pCMYy09Rhuw9djQy43G(String), 0:0:0:0:0:0:0:1(String), 2020-08-15 17:54:28.6195146(Timestamp), https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif(String), 2018-02-01 00:00:00.0(Timestamp), 2020-08-15 17:54:28.6195146(Timestamp), false(Boolean), [1](String), 1(Integer)
2020-08-15 17:54:28,627 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 17:54:28,628 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==>  Preparing: insert into jindouyun_log ( `admin`, ip, `type`, `action`, `status`, `result`, `comment`, add_time, update_time ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-08-15 17:54:28,629 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 登录(String), true(Boolean), (String), (String), 2020-08-15 17:54:28.6284517(Timestamp), 2020-08-15 17:54:28.6284517(Timestamp)
2020-08-15 17:54:28,633 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 17:54:28,634 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT LAST_INSERT_ID() 
2020-08-15 17:54:28,634 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 17:54:28,635 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:54:38,572 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 17:54:38,573 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 17:54:38,574 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:54:38,576 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 17:54:38,578 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 17:54:38,579 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:54:38,610 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 17:54:38,611 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 17:54:38,613 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:54:38,615 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 17:54:38,616 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 17:54:38,618 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:54:38,628 ERROR [http-nio-8080-exec-4] c.j.c.config.GlobalExceptionHandler [GlobalExceptionHandler.java : 72] String index out of range: -1
java.lang.StringIndexOutOfBoundsException: String index out of range: -1
	at java.base/java.lang.String.substring(String.java:1837)
	at com.jindouyun.core.storage.StorageService.generateKey(StorageService.java:64)
	at com.jindouyun.core.storage.StorageService.store(StorageService.java:47)
	at com.jindouyun.admin.controller.AdminStorageController.create(AdminStorageController.java:51)
	at com.jindouyun.admin.controller.AdminStorageController$$FastClassBySpringCGLIB$$34645db7.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.jindouyun.admin.controller.AdminStorageController$$EnhancerBySpringCGLIB$$371d8559.create(<generated>)
	at com.jindouyun.admin.controller.AdminStorageController$$FastClassBySpringCGLIB$$34645db7.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.validation.beanvalidation.MethodValidationInterceptor.invoke(MethodValidationInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor$1.proceed(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:82)
	at org.apache.shiro.authz.aop.AuthorizingMethodInterceptor.invoke(AuthorizingMethodInterceptor.java:39)
	at org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor.invoke(AopAllianceAnnotationsAuthorizingMethodInterceptor.java:115)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.jindouyun.admin.controller.AdminStorageController$$EnhancerBySpringCGLIB$$7c06a851.create(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:387)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:834)
2020-08-15 17:55:08,331 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 17:55:08,332 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:55:08,333 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 17:55:08.3319691(Timestamp), false(Boolean)
2020-08-15 17:55:08,334 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:55:08,335 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:55:08,335 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 17:55:08.3347159(Timestamp), false(Boolean)
2020-08-15 17:55:08,336 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:55:50,301 ERROR [http-nio-8080-exec-7] c.j.c.config.GlobalExceptionHandler [GlobalExceptionHandler.java : 72] Maximum upload size exceeded; nested exception is java.lang.IllegalStateException: org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException: the request was rejected because its size (13710851) exceeds the configured maximum (10485760)
org.springframework.web.multipart.MaxUploadSizeExceededException: Maximum upload size exceeded; nested exception is java.lang.IllegalStateException: org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException: the request was rejected because its size (13710851) exceeds the configured maximum (10485760)
	at org.springframework.web.multipart.support.StandardMultipartHttpServletRequest.handleParseFailure(StandardMultipartHttpServletRequest.java:121)
	at org.springframework.web.multipart.support.StandardMultipartHttpServletRequest.parseRequest(StandardMultipartHttpServletRequest.java:114)
	at org.springframework.web.multipart.support.StandardMultipartHttpServletRequest.<init>(StandardMultipartHttpServletRequest.java:87)
	at org.springframework.web.multipart.support.StandardServletMultipartResolver.resolveMultipart(StandardServletMultipartResolver.java:87)
	at org.springframework.web.servlet.DispatcherServlet.checkMultipart(DispatcherServlet.java:1176)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1011)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:387)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.IllegalStateException: org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException: the request was rejected because its size (13710851) exceeds the configured maximum (10485760)
	at org.apache.catalina.connector.Request.parseParts(Request.java:2899)
	at org.apache.catalina.connector.Request.parseParameters(Request.java:3194)
	at org.apache.catalina.connector.Request.getParameter(Request.java:1116)
	at org.apache.catalina.connector.RequestFacade.getParameter(RequestFacade.java:381)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:84)
	... 23 common frames omitted
Caused by: org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException: the request was rejected because its size (13710851) exceeds the configured maximum (10485760)
	at org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl.<init>(FileUploadBase.java:808)
	at org.apache.tomcat.util.http.fileupload.FileUploadBase.getItemIterator(FileUploadBase.java:256)
	at org.apache.tomcat.util.http.fileupload.FileUploadBase.parseRequest(FileUploadBase.java:280)
	at org.apache.catalina.connector.Request.parseParts(Request.java:2855)
	... 27 common frames omitted
2020-08-15 17:56:08,339 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 17:56:08,341 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:56:08,342 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 17:56:08.3390206(Timestamp), false(Boolean)
2020-08-15 17:56:08,342 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:56:08,343 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:56:08,344 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 17:56:08.3430431(Timestamp), false(Boolean)
2020-08-15 17:56:08,344 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:56:30,629 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 17:56:30,630 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 17:56:30,632 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:56:30,634 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 17:56:30,635 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 17:56:30,637 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:56:30,639 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 17:56:30,640 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 17:56:30,642 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:56:30,644 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 17:56:30,645 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 17:56:30,646 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:56:30,660 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectOneByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `key`, `name`, `type`, `size`, url, add_time, update_time, deleted from jindouyun_storage WHERE ( `key` = ? and deleted = ? ) limit 1 
2020-08-15 17:56:30,661 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectOneByExample [BaseJdbcLogger.java : 159] ==> Parameters: fdnzz2pnr9an69jh4ntg.txt(String), false(Boolean)
2020-08-15 17:56:30,663 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.selectOneByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:56:31,336 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==>  Preparing: insert into jindouyun_storage ( `key`, `name`, `type`, `size`, url, add_time, update_time ) values ( ?, ?, ?, ?, ?, ?, ? ) 
2020-08-15 17:56:31,337 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==> Parameters: fdnzz2pnr9an69jh4ntg.txt(String), testdata.txt(String), text/plain(String), 1292(Integer), http://59.110.153.227:9000/jindouyun/fdnzz2pnr9an69jh4ntg.txt(String), 2020-08-15 17:56:31.3357718(Timestamp), 2020-08-15 17:56:31.3357718(Timestamp)
2020-08-15 17:56:31,343 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 17:56:31,343 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT LAST_INSERT_ID() 
2020-08-15 17:56:31,344 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 17:56:31,345 DEBUG [http-nio-8080-exec-9] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:57:08,346 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 17:57:08,347 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:57:08,347 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 17:57:08.3464677(Timestamp), false(Boolean)
2020-08-15 17:57:08,348 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:57:08,349 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:57:08,349 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 17:57:08.348369(Timestamp), false(Boolean)
2020-08-15 17:57:08,351 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:57:57,577 DEBUG [restartedMain] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, key_name, key_value, add_time, update_time, deleted from jindouyun_system WHERE ( deleted = ? ) 
2020-08-15 17:57:57,598 DEBUG [restartedMain] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 17:57:57,625 DEBUG [restartedMain] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 20
2020-08-15 17:57:59,675 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 17:57:59,692 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:57:59,695 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 17:57:59.6839428(Timestamp), false(Boolean)
2020-08-15 17:57:59,699 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:57:59,709 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:57:59,709 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 17:57:59.7048518(Timestamp), false(Boolean)
2020-08-15 17:57:59,711 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:58:03,585 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, username, `password`, last_login_ip, last_login_time, avatar, add_time, update_time, deleted, role_ids from jindouyun_admin WHERE ( username = ? and deleted = ? ) 
2020-08-15 17:58:03,587 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), false(Boolean)
2020-08-15 17:58:03,595 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:58:03,699 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==>  Preparing: update jindouyun_admin SET username = ?, `password` = ?, last_login_ip = ?, last_login_time = ?, avatar = ?, add_time = ?, update_time = ?, deleted = ?, role_ids = ? where id = ? 
2020-08-15 17:58:03,712 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), $2a$10$2g8ffw7OSbKjYwsdJCy4qO1FZfT.zd.B75pCMYy09Rhuw9djQy43G(String), 0:0:0:0:0:0:0:1(String), 2020-08-15 17:58:03.6977131(Timestamp), https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif(String), 2018-02-01 00:00:00.0(Timestamp), 2020-08-15 17:58:03.6977131(Timestamp), false(Boolean), [1](String), 1(Integer)
2020-08-15 17:58:03,719 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 17:58:03,721 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==>  Preparing: insert into jindouyun_log ( `admin`, ip, `type`, `action`, `status`, `result`, `comment`, add_time, update_time ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-08-15 17:58:03,723 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 登录(String), true(Boolean), (String), (String), 2020-08-15 17:58:03.7206176(Timestamp), 2020-08-15 17:58:03.7206176(Timestamp)
2020-08-15 17:58:03,728 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 17:58:03,729 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT LAST_INSERT_ID() 
2020-08-15 17:58:03,729 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 17:58:03,730 DEBUG [http-nio-8080-exec-1] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:58:03,799 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 17:58:03,800 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 17:58:03,802 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:58:03,810 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 17:58:03,812 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 17:58:03,814 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:58:04,000 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_user WHERE ( deleted = ? ) 
2020-08-15 17:58:04,013 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 17:58:04,016 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:58:04,027 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods WHERE ( deleted = ? ) 
2020-08-15 17:58:04,029 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 17:58:04,031 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:58:04,038 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods_product WHERE ( deleted = ? ) 
2020-08-15 17:58:04,038 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 17:58:04,039 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:58:04,051 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_order WHERE ( deleted = ? ) 
2020-08-15 17:58:04,052 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 17:58:04,053 DEBUG [http-nio-8080-exec-4] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:58:10,210 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 17:58:10,212 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 17:58:10,212 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 17:58:10,214 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 17:58:10,214 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:58:10,217 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:58:10,217 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 17:58:10,219 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 17:58:10,219 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 17:58:10,220 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 17:58:10,221 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:58:10,222 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:58:10,265 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 17:58:10,265 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 17:58:10,266 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 17:58:10,266 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 17:58:10,268 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:58:10,268 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:58:10,270 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 17:58:10,270 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 17:58:10,270 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 17:58:10,270 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 17:58:10,271 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:58:10,271 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:58:10,285 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 17:58:10,285 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( `level` = ? and deleted = ? ) 
2020-08-15 17:58:10,286 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Integer), false(Boolean)
2020-08-15 17:58:10,286 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: L1(String), false(Boolean)
2020-08-15 17:58:10,293 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 10
2020-08-15 17:58:10,293 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 10
2020-08-15 17:58:10,298 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 17:58:10,299 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1005000(Integer), false(Boolean)
2020-08-15 17:58:10,302 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 10
2020-08-15 17:58:10,305 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 17:58:10,306 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1005001(Integer), false(Boolean)
2020-08-15 17:58:10,309 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 9
2020-08-15 17:58:10,311 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 17:58:10,313 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1005002(Integer), false(Boolean)
2020-08-15 17:58:10,316 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 10
2020-08-15 17:58:10,318 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 17:58:10,318 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1008000(Integer), false(Boolean)
2020-08-15 17:58:10,322 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 9
2020-08-15 17:58:10,323 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 17:58:10,324 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1010000(Integer), false(Boolean)
2020-08-15 17:58:10,327 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 11
2020-08-15 17:58:10,330 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 17:58:10,331 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1011000(Integer), false(Boolean)
2020-08-15 17:58:10,333 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 7
2020-08-15 17:58:10,335 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 17:58:10,336 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1012000(Integer), false(Boolean)
2020-08-15 17:58:10,338 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 10
2020-08-15 17:58:10,339 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 17:58:10,340 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1013001(Integer), false(Boolean)
2020-08-15 17:58:10,342 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 7
2020-08-15 17:58:10,343 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 17:58:10,344 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1019000(Integer), false(Boolean)
2020-08-15 17:58:10,347 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 11
2020-08-15 17:58:10,348 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 17:58:10,349 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1036008(Integer), false(Boolean)
2020-08-15 17:58:10,350 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:58:53,639 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_user WHERE ( deleted = ? ) 
2020-08-15 17:58:53,640 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 17:58:53,642 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:58:53,644 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods WHERE ( deleted = ? ) 
2020-08-15 17:58:53,645 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 17:58:53,647 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:58:53,648 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods_product WHERE ( deleted = ? ) 
2020-08-15 17:58:53,649 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 17:58:53,651 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:58:53,653 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_order WHERE ( deleted = ? ) 
2020-08-15 17:58:53,654 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 17:58:53,655 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:58:56,424 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==>  Preparing: insert into jindouyun_log ( `admin`, ip, `type`, `action`, `status`, `result`, `comment`, add_time, update_time ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-08-15 17:58:56,425 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 退出(String), true(Boolean), (String), (String), 2020-08-15 17:58:56.4236736(Timestamp), 2020-08-15 17:58:56.4236736(Timestamp)
2020-08-15 17:58:56,432 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 17:58:56,432 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT LAST_INSERT_ID() 
2020-08-15 17:58:56,433 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 17:58:56,434 DEBUG [http-nio-8080-exec-8] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:58:59,714 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 17:58:59,715 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:58:59,716 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 17:58:59.7148086(Timestamp), false(Boolean)
2020-08-15 17:58:59,717 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:58:59,717 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:58:59,718 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 17:58:59.7178013(Timestamp), false(Boolean)
2020-08-15 17:58:59,719 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:59:23,237 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, username, `password`, last_login_ip, last_login_time, avatar, add_time, update_time, deleted, role_ids from jindouyun_admin WHERE ( username = ? and deleted = ? ) 
2020-08-15 17:59:23,238 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), false(Boolean)
2020-08-15 17:59:23,239 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:59:23,328 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==>  Preparing: update jindouyun_admin SET username = ?, `password` = ?, last_login_ip = ?, last_login_time = ?, avatar = ?, add_time = ?, update_time = ?, deleted = ?, role_ids = ? where id = ? 
2020-08-15 17:59:23,329 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), $2a$10$2g8ffw7OSbKjYwsdJCy4qO1FZfT.zd.B75pCMYy09Rhuw9djQy43G(String), 0:0:0:0:0:0:0:1(String), 2020-08-15 17:59:23.3289856(Timestamp), https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif(String), 2018-02-01 00:00:00.0(Timestamp), 2020-08-15 17:59:23.3289856(Timestamp), false(Boolean), [1](String), 1(Integer)
2020-08-15 17:59:23,336 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.updateByPrimaryKeySelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 17:59:23,337 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==>  Preparing: insert into jindouyun_log ( `admin`, ip, `type`, `action`, `status`, `result`, `comment`, add_time, update_time ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-08-15 17:59:23,338 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] ==> Parameters: admin123(String), 0:0:0:0:0:0:0:1(String), 1(Integer), 登录(String), true(Boolean), (String), (String), 2020-08-15 17:59:23.3379628(Timestamp), 2020-08-15 17:59:23.3379628(Timestamp)
2020-08-15 17:59:23,343 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.insertSelective [BaseJdbcLogger.java : 159] <==    Updates: 1
2020-08-15 17:59:23,343 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==>  Preparing: SELECT LAST_INSERT_ID() 
2020-08-15 17:59:23,344 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 17:59:23,345 DEBUG [http-nio-8080-exec-10] c.j.d.d.J.insertSelective!selectKey [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:59:23,373 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 17:59:23,374 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 17:59:23,375 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:59:23,377 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 17:59:23,377 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 17:59:23,379 DEBUG [http-nio-8080-exec-2] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:59:23,474 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_user WHERE ( deleted = ? ) 
2020-08-15 17:59:23,475 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 17:59:23,477 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:59:23,479 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods WHERE ( deleted = ? ) 
2020-08-15 17:59:23,480 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 17:59:23,481 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:59:23,485 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_goods_product WHERE ( deleted = ? ) 
2020-08-15 17:59:23,486 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 17:59:23,487 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:59:23,489 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select count(*) from jindouyun_order WHERE ( deleted = ? ) 
2020-08-15 17:59:23,490 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 17:59:23,491 DEBUG [http-nio-8080-exec-3] c.j.d.d.J.countByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:59:32,072 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 17:59:32,073 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 17:59:32,075 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:59:32,076 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 17:59:32,077 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 17:59:32,078 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:59:32,090 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 17:59:32,091 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 17:59:32,092 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:59:32,095 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 17:59:32,096 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 17:59:32,098 DEBUG [http-nio-8080-exec-6] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 17:59:32,102 DEBUG [http-nio-8080-exec-6] c.j.db.dao.StatMapper.statUser [BaseJdbcLogger.java : 159] ==>  Preparing: select substr(add_time,1,10) as day, count(distinct id) as users from jindouyun_user group by substr(add_time,1,10) 
2020-08-15 17:59:32,103 DEBUG [http-nio-8080-exec-6] c.j.db.dao.StatMapper.statUser [BaseJdbcLogger.java : 159] ==> Parameters: 
2020-08-15 17:59:32,105 DEBUG [http-nio-8080-exec-6] c.j.db.dao.StatMapper.statUser [BaseJdbcLogger.java : 159] <==      Total: 4
2020-08-15 17:59:59,721 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 17:59:59,721 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:59:59,721 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 17:59:59.7211588(Timestamp), false(Boolean)
2020-08-15 17:59:59,722 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 17:59:59,723 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 17:59:59,724 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 17:59:59.7239241(Timestamp), false(Boolean)
2020-08-15 17:59:59,724 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:00:19,246 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 18:00:19,248 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 18:00:19,249 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 18:00:19,251 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 18:00:19,252 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 18:00:19,252 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 18:00:19,253 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 18:00:19,254 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 18:00:19,255 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 18:00:19,256 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 18:00:19,256 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 18:00:19,257 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 18:00:19,258 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 18:00:19,259 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 18:00:19,260 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 18:00:19,261 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 18:00:19,262 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, enabled, add_time, update_time, deleted from jindouyun_role WHERE ( id in ( ? ) and enabled = ? and deleted = ? ) 
2020-08-15 18:00:19,262 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 18:00:19,263 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), true(Boolean), false(Boolean)
2020-08-15 18:00:19,264 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 18:00:19,264 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 18:00:19,266 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, role_id, permission, add_time, update_time, deleted from jindouyun_permission WHERE ( role_id in ( ? ) and deleted = ? ) 
2020-08-15 18:00:19,266 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( `level` = ? and deleted = ? ) 
2020-08-15 18:00:19,267 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1(Integer), false(Boolean)
2020-08-15 18:00:19,267 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: L1(String), false(Boolean)
2020-08-15 18:00:19,269 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 1
2020-08-15 18:00:19,271 DEBUG [http-nio-8080-exec-7] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 10
2020-08-15 18:00:19,272 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 18:00:19,272 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Integer), false(Boolean)
2020-08-15 18:00:19,276 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 10
2020-08-15 18:00:19,278 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 18:00:19,279 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1005000(Integer), false(Boolean)
2020-08-15 18:00:19,283 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 10
2020-08-15 18:00:19,287 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 18:00:19,288 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1005001(Integer), false(Boolean)
2020-08-15 18:00:19,290 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 9
2020-08-15 18:00:19,292 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 18:00:19,293 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1005002(Integer), false(Boolean)
2020-08-15 18:00:19,295 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 10
2020-08-15 18:00:19,297 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 18:00:19,298 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1008000(Integer), false(Boolean)
2020-08-15 18:00:19,300 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 9
2020-08-15 18:00:19,301 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 18:00:19,301 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1010000(Integer), false(Boolean)
2020-08-15 18:00:19,303 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 11
2020-08-15 18:00:19,304 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 18:00:19,305 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1011000(Integer), false(Boolean)
2020-08-15 18:00:19,308 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 7
2020-08-15 18:00:19,310 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 18:00:19,311 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1012000(Integer), false(Boolean)
2020-08-15 18:00:19,314 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 10
2020-08-15 18:00:19,315 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 18:00:19,316 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1013001(Integer), false(Boolean)
2020-08-15 18:00:19,318 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 7
2020-08-15 18:00:19,319 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 18:00:19,320 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1019000(Integer), false(Boolean)
2020-08-15 18:00:19,323 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 11
2020-08-15 18:00:19,324 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, keywords, `desc`, pid, icon_url, pic_url, `level`, sort_order, add_time, update_time, deleted from jindouyun_category WHERE ( pid = ? and deleted = ? ) 
2020-08-15 18:00:19,325 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 1036008(Integer), false(Boolean)
2020-08-15 18:00:19,327 DEBUG [http-nio-8080-exec-5] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:00:59,726 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 18:00:59,728 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:00:59,729 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 18:00:59.7269756(Timestamp), false(Boolean)
2020-08-15 18:00:59,730 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:00:59,732 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:00:59,733 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 18:00:59.7319612(Timestamp), false(Boolean)
2020-08-15 18:00:59,733 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:01:59,736 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 18:01:59,738 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:01:59,739 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 18:01:59.7362286(Timestamp), false(Boolean)
2020-08-15 18:01:59,739 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:01:59,740 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:01:59,741 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 18:01:59.7409596(Timestamp), false(Boolean)
2020-08-15 18:01:59,741 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:02:59,744 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 18:02:59,747 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:02:59,747 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 18:02:59.7447225(Timestamp), false(Boolean)
2020-08-15 18:02:59,748 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:02:59,749 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:02:59,750 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 18:02:59.7497092(Timestamp), false(Boolean)
2020-08-15 18:02:59,751 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:03:59,754 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 18:03:59,755 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:03:59,756 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 18:03:59.7541694(Timestamp), false(Boolean)
2020-08-15 18:03:59,757 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:03:59,758 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:03:59,758 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 18:03:59.7579292(Timestamp), false(Boolean)
2020-08-15 18:03:59,759 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:04:59,761 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 18:04:59,763 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:04:59,764 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 18:04:59.7618082(Timestamp), false(Boolean)
2020-08-15 18:04:59,765 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:04:59,766 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:04:59,766 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 18:04:59.7657884(Timestamp), false(Boolean)
2020-08-15 18:04:59,767 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:05:59,770 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 18:05:59,773 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:05:59,774 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 18:05:59.7703353(Timestamp), false(Boolean)
2020-08-15 18:05:59,775 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:05:59,776 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:05:59,777 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 18:05:59.7763211(Timestamp), false(Boolean)
2020-08-15 18:05:59,777 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:06:59,780 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 18:06:59,782 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:06:59,782 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 18:06:59.7800062(Timestamp), false(Boolean)
2020-08-15 18:06:59,783 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:06:59,784 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:06:59,784 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 18:06:59.7839968(Timestamp), false(Boolean)
2020-08-15 18:06:59,786 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:07:59,787 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 18:07:59,789 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:07:59,790 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 18:07:59.7871936(Timestamp), false(Boolean)
2020-08-15 18:07:59,791 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:07:59,792 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:07:59,793 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 18:07:59.7921794(Timestamp), false(Boolean)
2020-08-15 18:07:59,793 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:08:59,795 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 18:08:59,797 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:08:59,798 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 18:08:59.7959204(Timestamp), false(Boolean)
2020-08-15 18:08:59,799 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:08:59,799 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:08:59,800 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 18:08:59.7998998(Timestamp), false(Boolean)
2020-08-15 18:08:59,801 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:09:59,803 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 18:09:59,806 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:09:59,806 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 18:09:59.8038835(Timestamp), false(Boolean)
2020-08-15 18:09:59,807 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:09:59,808 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:09:59,808 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 18:09:59.807638(Timestamp), false(Boolean)
2020-08-15 18:09:59,809 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:10:59,812 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 18:10:59,814 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:10:59,815 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 18:10:59.8121241(Timestamp), false(Boolean)
2020-08-15 18:10:59,816 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:10:59,817 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:10:59,817 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 18:10:59.8161127(Timestamp), false(Boolean)
2020-08-15 18:10:59,818 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:11:59,819 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 18:11:59,822 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:11:59,823 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 18:11:59.8198555(Timestamp), false(Boolean)
2020-08-15 18:11:59,824 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:11:59,824 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:11:59,825 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 18:11:59.8248777(Timestamp), false(Boolean)
2020-08-15 18:11:59,826 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:12:59,828 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 18:12:59,831 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:12:59,832 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 18:12:59.8283437(Timestamp), false(Boolean)
2020-08-15 18:12:59,833 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:12:59,835 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:12:59,836 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 18:12:59.834327(Timestamp), false(Boolean)
2020-08-15 18:12:59,837 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:13:59,838 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 18:13:59,840 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:13:59,841 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 18:13:59.8386527(Timestamp), false(Boolean)
2020-08-15 18:13:59,842 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:13:59,842 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:13:59,843 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 18:13:59.8426424(Timestamp), false(Boolean)
2020-08-15 18:13:59,843 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:14:59,845 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 18:14:59,848 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:14:59,848 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 18:14:59.8452377(Timestamp), false(Boolean)
2020-08-15 18:14:59,848 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:14:59,850 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:14:59,850 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 18:14:59.8489747(Timestamp), false(Boolean)
2020-08-15 18:14:59,850 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:15:59,852 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 18:15:59,854 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:15:59,855 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 18:15:59.8522661(Timestamp), false(Boolean)
2020-08-15 18:15:59,856 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:15:59,857 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:15:59,857 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 18:15:59.8562553(Timestamp), false(Boolean)
2020-08-15 18:15:59,858 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:16:59,859 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 18:16:59,861 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:16:59,861 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 18:16:59.8590182(Timestamp), false(Boolean)
2020-08-15 18:16:59,862 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:16:59,863 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:16:59,863 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 18:16:59.8637979(Timestamp), false(Boolean)
2020-08-15 18:16:59,864 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:17:59,866 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 18:17:59,868 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:17:59,869 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 18:17:59.8664502(Timestamp), false(Boolean)
2020-08-15 18:17:59,870 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:17:59,871 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:17:59,871 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 18:17:59.870472(Timestamp), false(Boolean)
2020-08-15 18:17:59,872 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:18:59,874 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 18:18:59,876 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:18:59,877 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 18:18:59.8749291(Timestamp), false(Boolean)
2020-08-15 18:18:59,877 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:18:59,878 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:18:59,879 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 18:18:59.8789188(Timestamp), false(Boolean)
2020-08-15 18:18:59,880 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:19:59,882 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 18:19:59,884 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:19:59,885 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 18:19:59.8828325(Timestamp), false(Boolean)
2020-08-15 18:19:59,886 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:19:59,887 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:19:59,887 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 18:19:59.8867868(Timestamp), false(Boolean)
2020-08-15 18:19:59,888 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:20:59,891 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 18:20:59,893 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:20:59,894 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 18:20:59.8912789(Timestamp), false(Boolean)
2020-08-15 18:20:59,894 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:20:59,895 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:20:59,895 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 18:20:59.8952998(Timestamp), false(Boolean)
2020-08-15 18:20:59,896 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:21:59,899 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 18:21:59,901 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:21:59,902 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 18:21:59.899134(Timestamp), false(Boolean)
2020-08-15 18:21:59,903 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 18:21:59,903 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 18:21:59,904 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 18:21:59.9038859(Timestamp), false(Boolean)
2020-08-15 18:21:59,905 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:25:14,722 DEBUG [restartedMain] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, key_name, key_value, add_time, update_time, deleted from jindouyun_system WHERE ( deleted = ? ) 
2020-08-15 22:25:14,766 DEBUG [restartedMain] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: false(Boolean)
2020-08-15 22:25:14,794 DEBUG [restartedMain] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 20
2020-08-15 22:25:17,523 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:25:17,540 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:25:17,542 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:25:17.5319811(Timestamp), false(Boolean)
2020-08-15 22:25:17,545 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:25:17,553 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:25:17,554 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:25:17.5509295(Timestamp), false(Boolean)
2020-08-15 22:25:17,556 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:26:17,558 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:26:17,562 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:26:17,563 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:26:17.5587222(Timestamp), false(Boolean)
2020-08-15 22:26:17,564 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:26:17,565 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:26:17,566 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:26:17.5656994(Timestamp), false(Boolean)
2020-08-15 22:26:17,567 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:27:17,569 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:27:17,572 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:27:17,573 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:27:17.5699857(Timestamp), false(Boolean)
2020-08-15 22:27:17,574 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:27:17,575 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:27:17,576 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:27:17.5757411(Timestamp), false(Boolean)
2020-08-15 22:27:17,577 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:28:17,579 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:28:17,582 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:28:17,583 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:28:17.5797432(Timestamp), false(Boolean)
2020-08-15 22:28:17,584 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:28:17,585 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:28:17,586 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:28:17.5857279(Timestamp), false(Boolean)
2020-08-15 22:28:17,587 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:29:17,596 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:29:17,604 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:29:17,605 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:29:17.6005185(Timestamp), false(Boolean)
2020-08-15 22:29:17,611 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:29:17,613 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:29:17,614 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:29:17.6124864(Timestamp), false(Boolean)
2020-08-15 22:29:17,620 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:30:17,622 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:30:17,626 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:30:17,632 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:30:17.6226409(Timestamp), false(Boolean)
2020-08-15 22:30:17,633 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:30:17,636 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:30:17,638 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:30:17.6346093(Timestamp), false(Boolean)
2020-08-15 22:30:17,639 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:31:17,640 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:31:17,643 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:31:17,644 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:31:17.6407969(Timestamp), false(Boolean)
2020-08-15 22:31:17,645 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:31:17,646 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:31:17,647 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:31:17.6466355(Timestamp), false(Boolean)
2020-08-15 22:31:17,648 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:32:17,650 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:32:17,653 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:32:17,654 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:32:17.6500958(Timestamp), false(Boolean)
2020-08-15 22:32:17,655 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:32:17,658 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:32:17,659 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:32:17.6579213(Timestamp), false(Boolean)
2020-08-15 22:32:17,660 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:33:17,662 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:33:17,665 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:33:17,666 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:33:17.662549(Timestamp), false(Boolean)
2020-08-15 22:33:17,666 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:33:17,668 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:33:17,668 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:33:17.6677863(Timestamp), false(Boolean)
2020-08-15 22:33:17,669 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:34:17,672 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:34:17,675 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:34:17,676 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:34:17.6723605(Timestamp), false(Boolean)
2020-08-15 22:34:17,677 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:34:17,678 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:34:17,679 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:34:17.6781021(Timestamp), false(Boolean)
2020-08-15 22:34:17,680 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:35:17,681 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:35:17,684 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:35:17,685 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:35:17.6819523(Timestamp), false(Boolean)
2020-08-15 22:35:17,686 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:35:17,687 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:35:17,687 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:35:17.6866938(Timestamp), false(Boolean)
2020-08-15 22:35:17,688 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:36:17,689 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:36:17,692 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:36:17,692 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:36:17.6897684(Timestamp), false(Boolean)
2020-08-15 22:36:17,693 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:36:17,694 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:36:17,695 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:36:17.694545(Timestamp), false(Boolean)
2020-08-15 22:36:17,695 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:37:17,697 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:37:17,700 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:37:17,701 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:37:17.6975179(Timestamp), false(Boolean)
2020-08-15 22:37:17,702 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:37:17,703 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:37:17,703 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:37:17.7025042(Timestamp), false(Boolean)
2020-08-15 22:37:17,704 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:38:17,706 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:38:17,709 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:38:17,709 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:38:17.7060943(Timestamp), false(Boolean)
2020-08-15 22:38:17,711 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:38:17,712 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:38:17,712 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:38:17.7111924(Timestamp), false(Boolean)
2020-08-15 22:38:17,713 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:39:17,714 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:39:17,717 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:39:17,718 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:39:17.7142046(Timestamp), false(Boolean)
2020-08-15 22:39:17,719 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:39:17,720 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:39:17,720 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:39:17.7191982(Timestamp), false(Boolean)
2020-08-15 22:39:17,721 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:40:17,723 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:40:17,727 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:40:17,728 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:40:17.724265(Timestamp), false(Boolean)
2020-08-15 22:40:17,729 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:40:17,731 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:40:17,731 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:40:17.7292093(Timestamp), false(Boolean)
2020-08-15 22:40:17,732 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:41:17,734 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:41:17,736 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:41:17,737 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:41:17.7342451(Timestamp), false(Boolean)
2020-08-15 22:41:17,738 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:41:17,739 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:41:17,740 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:41:17.7392249(Timestamp), false(Boolean)
2020-08-15 22:41:17,740 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:42:17,743 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:42:17,745 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:42:17,745 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:42:17.7430279(Timestamp), false(Boolean)
2020-08-15 22:42:17,746 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:42:17,747 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:42:17,748 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:42:17.7468484(Timestamp), false(Boolean)
2020-08-15 22:42:17,748 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:43:17,751 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:43:17,754 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:43:17,755 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:43:17.7516327(Timestamp), false(Boolean)
2020-08-15 22:43:17,756 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:43:17,757 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:43:17,758 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:43:17.7576201(Timestamp), false(Boolean)
2020-08-15 22:43:17,759 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:44:17,761 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:44:17,764 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:44:17,764 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:44:17.7612488(Timestamp), false(Boolean)
2020-08-15 22:44:17,765 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:44:17,766 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:44:17,767 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:44:17.7661981(Timestamp), false(Boolean)
2020-08-15 22:44:17,767 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:45:17,769 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:45:17,771 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:45:17,772 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:45:17.7695569(Timestamp), false(Boolean)
2020-08-15 22:45:17,773 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:45:17,774 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:45:17,774 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:45:17.7735463(Timestamp), false(Boolean)
2020-08-15 22:45:17,775 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:46:17,777 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:46:17,779 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:46:17,779 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:46:17.7770064(Timestamp), false(Boolean)
2020-08-15 22:46:17,780 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:46:17,781 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:46:17,781 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:46:17.7808407(Timestamp), false(Boolean)
2020-08-15 22:46:17,782 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:47:17,783 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:47:17,785 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:47:17,786 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:47:17.7838948(Timestamp), false(Boolean)
2020-08-15 22:47:17,787 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:47:17,789 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:47:17,790 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:47:17.7888806(Timestamp), false(Boolean)
2020-08-15 22:47:17,791 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:48:17,793 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:48:17,794 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:48:17,795 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:48:17.7930319(Timestamp), false(Boolean)
2020-08-15 22:48:17,796 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:48:17,796 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:48:17,797 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:48:17.7968545(Timestamp), false(Boolean)
2020-08-15 22:48:17,798 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:49:17,799 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:49:17,801 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:49:17,802 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:49:17.7996179(Timestamp), false(Boolean)
2020-08-15 22:49:17,803 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:49:17,804 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:49:17,804 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:49:17.8034488(Timestamp), false(Boolean)
2020-08-15 22:49:17,805 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:50:17,807 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:50:17,810 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:50:17,811 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:50:17.807386(Timestamp), false(Boolean)
2020-08-15 22:50:17,811 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:50:17,812 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:50:17,813 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:50:17.8121619(Timestamp), false(Boolean)
2020-08-15 22:50:17,813 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:51:17,815 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:51:17,817 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:51:17,818 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:51:17.8158905(Timestamp), false(Boolean)
2020-08-15 22:51:17,819 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:51:17,820 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:51:17,820 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:51:17.8197434(Timestamp), false(Boolean)
2020-08-15 22:51:17,821 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:52:17,823 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:52:17,825 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:52:17,826 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:52:17.8235895(Timestamp), false(Boolean)
2020-08-15 22:52:17,827 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:52:17,828 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:52:17,828 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:52:17.8276088(Timestamp), false(Boolean)
2020-08-15 22:52:17,829 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:53:17,831 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:53:17,834 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:53:17,834 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:53:17.8317506(Timestamp), false(Boolean)
2020-08-15 22:53:17,835 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:53:17,836 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:53:17,837 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:53:17.83648(Timestamp), false(Boolean)
2020-08-15 22:53:17,837 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:54:17,839 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:54:17,841 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:54:17,842 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:54:17.8397599(Timestamp), false(Boolean)
2020-08-15 22:54:17,843 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:54:17,843 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:54:17,844 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:54:17.8437524(Timestamp), false(Boolean)
2020-08-15 22:54:17,845 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:55:17,848 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:55:17,851 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:55:17,851 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:55:17.8481574(Timestamp), false(Boolean)
2020-08-15 22:55:17,852 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:55:17,853 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:55:17,853 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:55:17.8521045(Timestamp), false(Boolean)
2020-08-15 22:55:17,854 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:56:17,855 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:56:17,858 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:56:17,858 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:56:17.8554131(Timestamp), false(Boolean)
2020-08-15 22:56:17,859 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:56:17,860 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:56:17,860 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:56:17.8591891(Timestamp), false(Boolean)
2020-08-15 22:56:17,861 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:57:17,863 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:57:17,865 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:57:17,866 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:57:17.8635561(Timestamp), false(Boolean)
2020-08-15 22:57:17,867 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:57:17,867 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:57:17,868 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:57:17.8674935(Timestamp), false(Boolean)
2020-08-15 22:57:17,869 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:58:17,871 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:58:17,873 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:58:17,874 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:58:17.8711828(Timestamp), false(Boolean)
2020-08-15 22:58:17,875 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:58:17,876 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:58:17,876 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:58:17.8751352(Timestamp), false(Boolean)
2020-08-15 22:58:17,877 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:59:17,878 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 22:59:17,880 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:59:17,881 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 22:59:17.8784748(Timestamp), false(Boolean)
2020-08-15 22:59:17,882 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 22:59:17,883 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 22:59:17,883 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 22:59:17.8822182(Timestamp), false(Boolean)
2020-08-15 22:59:17,884 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:00:17,885 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:00:17,887 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:00:17,888 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:00:17.8858989(Timestamp), false(Boolean)
2020-08-15 23:00:17,889 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:00:17,889 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:00:17,890 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:00:17.8898177(Timestamp), false(Boolean)
2020-08-15 23:00:17,891 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:01:17,893 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:01:17,895 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:01:17,896 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:01:17.8931262(Timestamp), false(Boolean)
2020-08-15 23:01:17,897 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:01:17,898 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:01:17,898 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:01:17.8978624(Timestamp), false(Boolean)
2020-08-15 23:01:17,899 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:02:17,901 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:02:17,903 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:02:17,904 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:02:17.90155(Timestamp), false(Boolean)
2020-08-15 23:02:17,905 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:02:17,906 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:02:17,906 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:02:17.90554(Timestamp), false(Boolean)
2020-08-15 23:02:17,907 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:03:17,908 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:03:17,910 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:03:17,911 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:03:17.9087747(Timestamp), false(Boolean)
2020-08-15 23:03:17,912 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:03:17,912 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:03:17,913 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:03:17.9125443(Timestamp), false(Boolean)
2020-08-15 23:03:17,913 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:04:17,915 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:04:17,917 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:04:17,918 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:04:17.9156714(Timestamp), false(Boolean)
2020-08-15 23:04:17,918 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:04:17,919 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:04:17,920 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:04:17.9194602(Timestamp), false(Boolean)
2020-08-15 23:04:17,920 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:05:17,923 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:05:17,924 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:05:17,925 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:05:17.9232102(Timestamp), false(Boolean)
2020-08-15 23:05:17,926 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:05:17,927 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:05:17,927 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:05:17.9269513(Timestamp), false(Boolean)
2020-08-15 23:05:17,928 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:06:17,930 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:06:17,931 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:06:17,932 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:06:17.9301369(Timestamp), false(Boolean)
2020-08-15 23:06:17,933 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:06:17,933 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:06:17,934 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:06:17.9339423(Timestamp), false(Boolean)
2020-08-15 23:06:17,935 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:07:17,937 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:07:17,939 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:07:17,940 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:07:17.9371(Timestamp), false(Boolean)
2020-08-15 23:07:17,940 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:07:17,941 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:07:17,942 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:07:17.9410883(Timestamp), false(Boolean)
2020-08-15 23:07:17,943 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:08:17,944 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:08:17,946 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:08:17,947 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:08:17.9447527(Timestamp), false(Boolean)
2020-08-15 23:08:17,947 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:08:17,948 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:08:17,949 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:08:17.9487403(Timestamp), false(Boolean)
2020-08-15 23:08:17,949 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:09:17,951 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:09:17,953 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:09:17,954 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:09:17.9519087(Timestamp), false(Boolean)
2020-08-15 23:09:17,955 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:09:17,955 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:09:17,956 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:09:17.9558975(Timestamp), false(Boolean)
2020-08-15 23:09:17,957 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:10:17,959 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:10:17,961 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:10:17,962 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:10:17.9596618(Timestamp), false(Boolean)
2020-08-15 23:10:17,963 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:10:17,964 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:10:17,964 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:10:17.9633954(Timestamp), false(Boolean)
2020-08-15 23:10:17,965 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:11:17,966 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:11:17,968 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:11:17,969 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:11:17.9666779(Timestamp), false(Boolean)
2020-08-15 23:11:17,969 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:11:17,970 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:11:17,971 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:11:17.9706679(Timestamp), false(Boolean)
2020-08-15 23:11:17,971 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:12:17,973 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:12:17,975 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:12:17,976 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:12:17.9735015(Timestamp), false(Boolean)
2020-08-15 23:12:17,977 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:12:17,977 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:12:17,978 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:12:17.9774896(Timestamp), false(Boolean)
2020-08-15 23:12:17,979 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:13:17,980 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:13:17,982 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:13:17,983 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:13:17.9805988(Timestamp), false(Boolean)
2020-08-15 23:13:17,983 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:13:17,984 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:13:17,985 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:13:17.9845904(Timestamp), false(Boolean)
2020-08-15 23:13:17,985 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:14:17,987 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:14:17,989 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:14:17,990 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:14:17.9877189(Timestamp), false(Boolean)
2020-08-15 23:14:17,991 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:14:17,992 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:14:17,992 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:14:17.991466(Timestamp), false(Boolean)
2020-08-15 23:14:17,993 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:15:17,996 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:15:17,998 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:15:17,999 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:15:17.9964229(Timestamp), false(Boolean)
2020-08-15 23:15:17,999 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:15:18,000 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:15:18,001 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:15:18.0004139(Timestamp), false(Boolean)
2020-08-15 23:15:18,001 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:16:18,003 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:16:18,005 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:16:18,005 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:16:18.0039801(Timestamp), false(Boolean)
2020-08-15 23:16:18,006 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:16:18,007 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:16:18,007 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:16:18.0069404(Timestamp), false(Boolean)
2020-08-15 23:16:18,008 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:17:18,010 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:17:18,012 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:17:18,013 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:17:18.0104479(Timestamp), false(Boolean)
2020-08-15 23:17:18,014 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:17:18,014 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:17:18,015 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:17:18.0144376(Timestamp), false(Boolean)
2020-08-15 23:17:18,015 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:18:18,016 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:18:18,018 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:18:18,019 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:18:18.0166791(Timestamp), false(Boolean)
2020-08-15 23:18:18,020 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:18:18,021 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:18:18,021 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:18:18.0205136(Timestamp), false(Boolean)
2020-08-15 23:18:18,022 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:19:18,024 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:19:18,026 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:19:18,027 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:19:18.0240213(Timestamp), false(Boolean)
2020-08-15 23:19:18,027 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:19:18,028 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:19:18,029 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:19:18.0280111(Timestamp), false(Boolean)
2020-08-15 23:19:18,029 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:20:18,031 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:20:18,033 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:20:18,034 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:20:18.0315519(Timestamp), false(Boolean)
2020-08-15 23:20:18,035 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:20:18,035 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:20:18,036 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:20:18.035356(Timestamp), false(Boolean)
2020-08-15 23:20:18,036 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:21:18,038 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:21:18,040 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:21:18,041 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:21:18.0381151(Timestamp), false(Boolean)
2020-08-15 23:21:18,041 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:21:18,042 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:21:18,042 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:21:18.042143(Timestamp), false(Boolean)
2020-08-15 23:21:18,043 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:22:18,045 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:22:18,047 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:22:18,048 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:22:18.0458059(Timestamp), false(Boolean)
2020-08-15 23:22:18,049 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:22:18,049 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:22:18,050 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:22:18.0496302(Timestamp), false(Boolean)
2020-08-15 23:22:18,050 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:23:18,052 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:23:18,054 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:23:18,055 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:23:18.0526632(Timestamp), false(Boolean)
2020-08-15 23:23:18,055 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:23:18,056 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:23:18,057 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:23:18.0564044(Timestamp), false(Boolean)
2020-08-15 23:23:18,057 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:24:18,060 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:24:18,062 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:24:18,062 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:24:18.060092(Timestamp), false(Boolean)
2020-08-15 23:24:18,063 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:24:18,064 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:24:18,064 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:24:18.0640812(Timestamp), false(Boolean)
2020-08-15 23:24:18,065 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:25:18,067 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:25:18,069 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:25:18,070 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:25:18.0674155(Timestamp), false(Boolean)
2020-08-15 23:25:18,071 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:25:18,072 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:25:18,072 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:25:18.0711541(Timestamp), false(Boolean)
2020-08-15 23:25:18,073 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:26:18,074 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:26:18,076 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:26:18,077 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:26:18.0746157(Timestamp), false(Boolean)
2020-08-15 23:26:18,077 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:26:18,078 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:26:18,079 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:26:18.0786448(Timestamp), false(Boolean)
2020-08-15 23:26:18,079 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:27:18,082 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:27:18,083 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:27:18,084 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:27:18.0820783(Timestamp), false(Boolean)
2020-08-15 23:27:18,085 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:27:18,085 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:27:18,086 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:27:18.0858201(Timestamp), false(Boolean)
2020-08-15 23:27:18,086 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:28:18,089 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:28:18,092 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:28:18,092 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:28:18.0897041(Timestamp), false(Boolean)
2020-08-15 23:28:18,094 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:28:18,095 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:28:18,096 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:28:18.0954414(Timestamp), false(Boolean)
2020-08-15 23:28:18,097 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:29:18,099 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:29:18,100 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:29:18,101 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:29:18.0991776(Timestamp), false(Boolean)
2020-08-15 23:29:18,102 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:29:18,102 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:29:18,103 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:29:18.1029533(Timestamp), false(Boolean)
2020-08-15 23:29:18,103 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:30:18,106 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:30:18,108 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:30:18,108 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:30:18.1063617(Timestamp), false(Boolean)
2020-08-15 23:30:18,109 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:30:18,110 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:30:18,110 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:30:18.1103662(Timestamp), false(Boolean)
2020-08-15 23:30:18,111 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:31:18,113 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:31:18,115 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:31:18,116 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:31:18.1135953(Timestamp), false(Boolean)
2020-08-15 23:31:18,116 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:31:18,117 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:31:18,117 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:31:18.1176208(Timestamp), false(Boolean)
2020-08-15 23:31:18,118 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:32:18,121 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:32:18,122 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:32:18,123 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:32:18.1211512(Timestamp), false(Boolean)
2020-08-15 23:32:18,124 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:32:18,124 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:32:18,125 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:32:18.1248888(Timestamp), false(Boolean)
2020-08-15 23:32:18,125 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:33:18,128 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:33:18,130 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:33:18,131 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:33:18.128498(Timestamp), false(Boolean)
2020-08-15 23:33:18,131 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:33:18,132 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:33:18,133 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:33:18.1324871(Timestamp), false(Boolean)
2020-08-15 23:33:18,134 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:34:18,135 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:34:18,137 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:34:18,137 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:34:18.1352545(Timestamp), false(Boolean)
2020-08-15 23:34:18,137 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:34:18,138 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:34:18,139 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:34:18.1389889(Timestamp), false(Boolean)
2020-08-15 23:34:18,140 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:35:18,141 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:35:18,143 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:35:18,144 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:35:18.1418331(Timestamp), false(Boolean)
2020-08-15 23:35:18,144 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:35:18,145 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:35:18,146 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:35:18.1456357(Timestamp), false(Boolean)
2020-08-15 23:35:18,146 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:36:18,148 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:36:18,150 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:36:18,150 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:36:18.1486285(Timestamp), false(Boolean)
2020-08-15 23:36:18,151 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:36:18,152 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:36:18,152 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:36:18.1526192(Timestamp), false(Boolean)
2020-08-15 23:36:18,153 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:37:18,156 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:37:18,158 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:37:18,158 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:37:18.1563928(Timestamp), false(Boolean)
2020-08-15 23:37:18,159 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:37:18,160 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:37:18,160 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:37:18.1593851(Timestamp), false(Boolean)
2020-08-15 23:37:18,161 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:38:18,162 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:38:18,164 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:38:18,165 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:38:18.1629302(Timestamp), false(Boolean)
2020-08-15 23:38:18,166 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:38:18,166 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:38:18,167 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:38:18.166695(Timestamp), false(Boolean)
2020-08-15 23:38:18,167 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:39:18,170 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:39:18,173 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:39:18,174 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:39:18.1702372(Timestamp), false(Boolean)
2020-08-15 23:39:18,174 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:39:18,175 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:39:18,176 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:39:18.1752245(Timestamp), false(Boolean)
2020-08-15 23:39:18,176 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:40:18,178 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:40:18,180 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:40:18,180 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:40:18.178391(Timestamp), false(Boolean)
2020-08-15 23:40:18,181 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:40:18,182 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:40:18,183 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:40:18.1823808(Timestamp), false(Boolean)
2020-08-15 23:40:18,184 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:41:18,186 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:41:18,188 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:41:18,188 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:41:18.1864496(Timestamp), false(Boolean)
2020-08-15 23:41:18,189 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:41:18,190 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:41:18,190 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:41:18.1894778(Timestamp), false(Boolean)
2020-08-15 23:41:18,191 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:42:18,192 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:42:18,194 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:42:18,195 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:42:18.1929281(Timestamp), false(Boolean)
2020-08-15 23:42:18,196 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:42:18,197 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:42:18,197 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:42:18.1976953(Timestamp), false(Boolean)
2020-08-15 23:42:18,200 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:43:18,203 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:43:18,204 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:43:18,205 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:43:18.2031491(Timestamp), false(Boolean)
2020-08-15 23:43:18,206 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:43:18,206 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:43:18,207 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:43:18.2068941(Timestamp), false(Boolean)
2020-08-15 23:43:18,207 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:44:18,210 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:44:18,212 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:44:18,212 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:44:18.2103544(Timestamp), false(Boolean)
2020-08-15 23:44:18,213 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:44:18,214 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:44:18,214 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:44:18.2143447(Timestamp), false(Boolean)
2020-08-15 23:44:18,215 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:45:18,217 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:45:18,219 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:45:18,220 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:45:18.2174539(Timestamp), false(Boolean)
2020-08-15 23:45:18,220 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:45:18,221 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:45:18,221 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:45:18.2214434(Timestamp), false(Boolean)
2020-08-15 23:45:18,222 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:46:18,224 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:46:18,226 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:46:18,227 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:46:18.2248377(Timestamp), false(Boolean)
2020-08-15 23:46:18,227 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:46:18,228 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:46:18,229 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:46:18.2285732(Timestamp), false(Boolean)
2020-08-15 23:46:18,229 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:47:18,231 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:47:18,233 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:47:18,233 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:47:18.2316884(Timestamp), false(Boolean)
2020-08-15 23:47:18,234 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:47:18,235 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:47:18,235 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:47:18.2347173(Timestamp), false(Boolean)
2020-08-15 23:47:18,236 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:48:18,238 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:48:18,240 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:48:18,241 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:48:18.2382308(Timestamp), false(Boolean)
2020-08-15 23:48:18,241 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:48:18,242 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:48:18,242 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:48:18.2419802(Timestamp), false(Boolean)
2020-08-15 23:48:18,244 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:49:18,245 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:49:18,247 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:49:18,247 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:49:18.2457241(Timestamp), false(Boolean)
2020-08-15 23:49:18,248 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:49:18,249 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:49:18,249 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:49:18.2497267(Timestamp), false(Boolean)
2020-08-15 23:49:18,250 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:50:18,253 INFO [scheduling-1] com.jindouyun.admin.job.CouponJob [CouponJob.java : 36] 系统开启任务检查优惠券是否已经过期
2020-08-15 23:50:18,255 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, `name`, `desc`, total, discount, `min`, `limit`, `type`, `status`, goods_type, goods_value, time_type, `days`, start_time, end_time, add_time, update_time, deleted from jindouyun_coupon WHERE ( `status` = ? and time_type = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:50:18,256 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 1(Short), 2020-08-15 23:50:18.2536472(Timestamp), false(Boolean)
2020-08-15 23:50:18,257 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
2020-08-15 23:50:18,258 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==>  Preparing: select id, user_id, coupon_id, `status`, used_time, start_time, end_time, order_id, add_time, update_time, deleted from jindouyun_coupon_user WHERE ( `status` = ? and end_time < ? and deleted = ? ) 
2020-08-15 23:50:18,258 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] ==> Parameters: 0(Short), 2020-08-15 23:50:18.2576371(Timestamp), false(Boolean)
2020-08-15 23:50:18,259 DEBUG [scheduling-1] c.j.d.d.J.selectByExample [BaseJdbcLogger.java : 159] <==      Total: 0
